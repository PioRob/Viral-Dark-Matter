%% File : sldemo_sfun_cplx_gain.tlc
%%
%% Description: 
%%   Real-Time Workshop TLC Code Generation file for sldemo_sfun_cplx_gain
%%
%% Simulink version      : 7.6 (R2010b) 28-Jun-2010
%% TLC file generated on : 30-Jun-2010 04:12:08

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'sldemo_sfun_cplx_gain';
     def.OutputFcnSpec = 'void cplx_gain(complex<double> u1[1], complex<double> p1[1], complex<double> y1[1])';
     def.HeaderFiles = {'cplxgain.h'};
     def.SourceFiles = {'cplxgain.c'};
     def.IncPaths = {'sldemo_lct_src'};
     def.SrcPaths = {'sldemo_lct_src'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements sldemo_sfun_cplx_gain "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %<LibAddToCommonIncludes("cplxgain.h")>
  %<SLibAddToStaticSources("cplxgain.c")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %assign p1_ptr = LibBlockParameterBaseAddr(p1)
  %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
  %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
  %%
  cplx_gain( (creal_T*)%<u1_ptr>, (creal_T*)%<p1_ptr>, %<y1_ptr>);
  %%
%endfunction

%% [EOF]
