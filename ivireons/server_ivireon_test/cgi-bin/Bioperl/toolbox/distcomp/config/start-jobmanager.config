import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.start.SharedActivatableServiceDescriptor;
import com.sun.jini.start.SharedActivationGroupDescriptor;
import com.mathworks.toolbox.distcomp.util.ConfigUtil;
import com.mathworks.toolbox.distcomp.control.PortConfig;

/* Copyright 2004-2010 The MathWorks, Inc. */

com.sun.jini.start {
    serviceType = "jobmanager";

    /* log, config, and jar directory definitions */
    private static logPrefix = "${com.mathworks.toolbox.distcomp.checkpointdir}${/}${com.mathworks.toolbox.distcomp.hostname}_${com.mathworks.toolbox.distcomp.servicename}";
    private static configDir = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}config${/}";

    private static jarDir            = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}..${/}..${/}java${/}jar";
    private static toolboxJarDir     = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}..${/}..${/}java${/}jar${/}toolbox";
    private static distcompJarextDir = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}..${/}..${/}java${/}jarext${/}distcomp";
    private static jiniJarDir        = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}..${/}..${/}java${/}jarext${/}distcomp${/}jini2${/}lib";

    act_sys_host = "${com.mathworks.toolbox.distcomp.hostname}";
    act_sys_port = PortConfig.getPhoenixPort("${com.mathworks.toolbox.distcomp.base_port}");

    persistenceDirectory = ConfigUtil.concat(logPrefix, ConfigUtil.getServicePostfix(serviceType));    
    checkpointDirectory  = "${com.mathworks.toolbox.distcomp.checkpointdir}";
    logDirectory         = "${com.mathworks.toolbox.distcomp.logdir}";

    //
    // Shared Group Environment
    //
    private static sharedVM_classpath  = ConfigUtil.path(new String[]{
            ConfigUtil.fullfile(jiniJarDir,        "sharedvm.jar"),
            ConfigUtil.fullfile(jiniJarDir,        "phoenix.jar"),  
            ConfigUtil.fullfile(toolboxJarDir,     "distcomp.jar"),
            ConfigUtil.fullfile(jiniJarDir,        "jini-ext.jar"), 
            ConfigUtil.fullfile(jiniJarDir,        "reggie.jar"),   
            ConfigUtil.fullfile(jiniJarDir,        "destroy.jar"),  
            ConfigUtil.fullfile(distcompJarextDir, "h2.jar"),       
            ConfigUtil.fullfile(jarDir,            "beans.jar"),    
            ConfigUtil.fullfile(jarDir,            "util.jar")
          });

    private static sharedVM_policy = ConfigUtil.fullfile(configDir,"jsk-all.policy");

    sharedVM_log = ConfigUtil.concat(logPrefix, ConfigUtil.getServiceSharedVMPostfix(serviceType));

    private static sharedVM_command = null;

    private static jvmStartupFlags = ConfigUtil.concat(
                ConfigUtil.getJVMStartupFlags("${com.mathworks.toolbox.distcomp.jreflags}"),
                ConfigUtil.getJVMDebugProperties("${com.mathworks.toolbox.distcomp.debug_jobmanager_port}")
            );

    // -Xrs: Reduces usage of operating-system signals by the Java virtual machine (JVM)
    // -Xmx: Specify the maximum size, in bytes, of the memory allocation pool. 
    private static extraJVMFlags = new String[]{"-Xrs", "-Xmx${com.mathworks.toolbox.distcomp.job_manager_maximum_memory}"};

    private static sharedVM_options = ConfigUtil.concat(jvmStartupFlags, extraJVMFlags);

    private static sharedVM_properties = new String[]{
        "com.mathworks.toolbox.distcomp.toolboxroot",                    "${com.mathworks.toolbox.distcomp.toolboxroot}",
        "com.mathworks.toolbox.distcomp.membergroups",                   "${com.mathworks.toolbox.distcomp.membergroups}",
        "com.mathworks.toolbox.distcomp.servicename",                    "${com.mathworks.toolbox.distcomp.servicename}",
        "com.mathworks.toolbox.distcomp.hostname",                       "${com.mathworks.toolbox.distcomp.hostname}",
        "com.mathworks.toolbox.distcomp.base_port",                      "${com.mathworks.toolbox.distcomp.base_port}",
        "com.mathworks.toolbox.distcomp.lookup_hosts",                   "${com.mathworks.toolbox.distcomp.lookup_hosts}",
        "com.mathworks.toolbox.distcomp.checkpointdir",                  "${com.mathworks.toolbox.distcomp.checkpointdir}",
        "com.mathworks.toolbox.distcomp.clean_checkpoint_info",          "${com.mathworks.toolbox.distcomp.clean_checkpoint_info}",
        "com.mathworks.toolbox.distcomp.logdir",                         "${com.mathworks.toolbox.distcomp.logdir}",
        "com.mathworks.toolbox.distcomp.persistenceDir",                 persistenceDirectory, 
        "com.mathworks.toolbox.distcomp.maxJobManagerHeapMemory",        "${com.mathworks.toolbox.distcomp.job_manager_maximum_memory}", 
        "com.mathworks.toolbox.distcomp.loglevel",                       "${com.mathworks.toolbox.distcomp.loglevel}",
        "com.mathworks.toolbox.distcomp.securityLevel",                  "${com.mathworks.toolbox.distcomp.securityLevel}",
        "com.mathworks.toolbox.distcomp.securityDir",                    "${com.mathworks.toolbox.distcomp.securityDir}",
        "com.mathworks.toolbox.distcomp.auth.mdceAllowGlobalPasswordlessLogon","${com.mathworks.toolbox.distcomp.auth.mdceAllowGlobalPasswordlessLogon}",
        "com.mathworks.toolbox.distcomp.auth.allowClientPasswordCache",  "${com.mathworks.toolbox.distcomp.auth.allowClientPasswordCache}",
        "com.mathworks.toolbox.distcomp.auth.adminUser",                 "${com.mathworks.toolbox.distcomp.auth.adminUser}",
        "com.mathworks.toolbox.distcomp.auth.allowedUsers",              "${com.mathworks.toolbox.distcomp.auth.allowedUsers}",
        "com.mathworks.toolbox.distcomp.jobmanager.serializedPublicKey", "${com.mathworks.toolbox.distcomp.jobmanager.serializedPublicKey}",
        "com.mathworks.toolbox.distcomp.rmi.useSecureCommunication",     "${com.mathworks.toolbox.distcomp.rmi.useSecureCommunication}",
        "com.mathworks.toolbox.distcomp.rmi.secureDataTransfer",         "true",
        "com.mathworks.toolbox.distcomp.rmi.keystorePath",               "${com.mathworks.toolbox.distcomp.rmi.keystorePath}",
        "com.mathworks.toolbox.distcomp.rmi.defaultKeystorePath",        "${com.mathworks.toolbox.distcomp.rmi.defaultKeystorePath}",
        "com.mathworks.toolbox.distcomp.rmi.keystorePassword",           "${com.mathworks.toolbox.distcomp.rmi.keystorePassword}",
        "com.mathworks.toolbox.distcomp.rmi.useServerSpecifiedHostname", "true",
        "java.security.manager",                                         "com.mathworks.toolbox.distcomp.util.AllowAllSecurityManager",
        "java.library.path",                                             "${com.mathworks.toolbox.distcomp.library_path}",
        "java.rmi.server.hostname",                                      "${com.mathworks.toolbox.distcomp.hostname}",
        "java.security.egd",                                             "file:/dev/urandom",
        "java.rmi.server.useCodebaseOnly",                               "true",
        "sun.net.inetaddr.ttl",                                          "${com.mathworks.toolbox.distcomp.DNS_lookupInterval}",
        "sun.rmi.transport.connectionTimeout",                           "${com.mathworks.toolbox.distcomp.RMI_connectionTimeout}",
        "sun.rmi.transport.tcp.readTimeout",                             "${com.mathworks.toolbox.distcomp.RMI_readTimeout}",
        "sun.rmi.dgc.client.gcInterval",                                 "${com.mathworks.toolbox.distcomp.jobmanager_gcInterval}"};
                          
    private static sharedVM =
        new SharedActivationGroupDescriptor(
            sharedVM_policy,
            sharedVM_classpath,
            sharedVM_log,
            sharedVM_command,
            sharedVM_options,
            sharedVM_properties,
            act_sys_host,
            act_sys_port);

    //
    // Job Manager
    //
    private static jobmanager_codebase  = "";
    private static jobmanager_policy    = ConfigUtil.fullfile(configDir,"jsk-all.policy");

    private static jobmanager_classpath = ConfigUtil.path(new String[]{            
            ConfigUtil.fullfile(jiniJarDir, "phoenix.jar"),
            ConfigUtil.fullfile(jiniJarDir, "reggie.jar"), 
            ConfigUtil.fullfile(jiniJarDir, "destroy.jar"),
            ConfigUtil.fullfile(jarDir,     "beans.jar"),
            ConfigUtil.fullfile(jarDir,     "util.jar")
        });

    private static jobmanager_impl      = "com.mathworks.toolbox.distcomp.jobmanager.JobManagerImpl";
    private static jobmanager_config    = ConfigUtil.fullfile(configDir,"jobmanager.config");
    // - The h2.check properties change some internal database settings which
    //   otherwise cause sporadic failures when inserting a job (freeCount) as
    //   seen in BaT. These properties may be removed in the future when
    //   updating H2 database to a newer version (> 1.0.78). See geck 491052.
    // - The settings for lobFiles cause lob files (large objects files) to be
    //   put into dedicated directories with limited number of files therein.
    //   Surplus files and directories will be put into sub-directories (for
    //   which the same limit applies). This avoids checkpoint dirs with huge
    //   numbers of files in any directory.
    private static jobmanager_service   =
        new SharedActivatableServiceDescriptor(
            jobmanager_codebase,
            jobmanager_policy,
            jobmanager_classpath,
            jobmanager_impl,
            sharedVM_log,
            new String[]{
                jobmanager_config,
                "h2.check",                 "false",
                "h2.check2",                "false",
                "h2.lobFilesInDirectories", "true",
                "h2.lobFilesPerDirectory",  "256"
            },
            true,
            act_sys_host,
            act_sys_port);


    //
    // Services to start -- used by ServiceStarter.main()
    //
    static serviceDescriptors = new ServiceDescriptor[] {
        sharedVM,
        jobmanager_service
    };
    
    
    //
    // Shared Group 
    //
    private static shared_group_codebase  = "";
    private static shared_group_policy    = ConfigUtil.fullfile(configDir, "jsk-all.policy");
    private static shared_group_classpath = ConfigUtil.fullfile(jiniJarDir, "group.jar");
    private static shared_group_config    = ConfigUtil.fullfile(configDir, "group.config");
    private static shared_group_impl      = "com.sun.jini.start.SharedGroupImpl";
    private static shared_group_service   =
        new SharedActivatableServiceDescriptor(
            shared_group_codebase,
            shared_group_policy,
            shared_group_classpath,
            shared_group_impl,
            sharedVM_log, // Same as above
            new String[] { shared_group_config },
            false,
            act_sys_host,
            act_sys_port);
    
    //
    // Groups to destroy -- used by DestroySharedGroup.main()
    //
    static serviceDestructors =
        new ServiceDescriptor[] { shared_group_service };
}

