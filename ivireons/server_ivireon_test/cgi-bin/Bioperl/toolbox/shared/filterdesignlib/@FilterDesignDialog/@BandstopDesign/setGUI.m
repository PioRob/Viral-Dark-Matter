function b = setGUI(this, Hd)
%SETGUI   Set the GUI.

%   Author(s): J. Schickler
%   Copyright 2005-2010 The MathWorks, Inc.
%   $Revision: 1.1.6.4 $  $Date: 2010/05/20 03:03:13 $

b = true;
hfdesign = getfdesign(Hd);
if ~strcmpi(get(hfdesign, 'Response'), 'bandstop')
    b = false;
    return;
end

switch lower(hfdesign.Specification)
    case 'fp1,fst1,fst2,fp2,ap1,ast,ap2'
        set(this, ...
            'Fpass1', num2str(hfdesign.Fpass1), ...
            'Fstop1', num2str(hfdesign.Fstop1), ...
            'Fstop2', num2str(hfdesign.Fstop2), ...
            'Fpass2', num2str(hfdesign.Fpass2), ...
            'Apass1', num2str(hfdesign.Apass1), ...
            'Astop',  num2str(hfdesign.Astop), ...
            'Apass1', num2str(hfdesign.Apass2));
    case 'n,f3db1,f3db2'
        set(this, ...
            'privFrequencyConstraints', '3db points', ...
            'privMagnitudeConstraints', 'unconstrained', ...
            'F3db1', num2str(hfdesign.F3db1), ...
            'F3db2', num2str(hfdesign.F3db2));
    case 'n,f3db1,f3db2,ap'
        set(this, ...
            'privFrequencyConstraints', '3db points', ...
            'privMagnitudeConstraints', 'Passband ripple', ...
            'F3db1',  num2str(hfdesign.F3db1), ...
            'F3db2',  num2str(hfdesign.F3db2), ...
            'Apass1', num2str(hfdesign.Apass));
    case 'n,f3db1,f3db2,ast'
        set(this, ...
            'privFrequencyConstraints', '3db points', ...
            'privMagnitudeConstraints', 'Stopband attenuation', ...
            'F3db1', num2str(hfdesign.F3db1), ...
            'F3db2', num2str(hfdesign.F3db2), ...
            'Astop', num2str(hfdesign.Astop));
    case 'n,f3db1,f3db2,ap,ast'
        set(this, ...
            'privFrequencyConstraints', '3dB points', ...
            'privMagnitudeConstraints', 'passband ripples and stopband attenuation', ...
            'F3dB1', num2str(hfdesign.F3db1), ...
            'F3dB2', num2str(hfdesign.F3db2), ...
            'Apass1', num2str(hfdesign.Apass), ...
            'Astop', num2str(hfdesign.Astop));
    case 'n,f3db1,f3db2,bwp'
        set(this, ...
            'privFrequencyConstraints', '3db points and passband width', ...
            'privMagnitudeConstraints', 'unconstrained', ...
            'F3db1',  num2str(hfdesign.F3db1), ...
            'F3db2',  num2str(hfdesign.F3db2), ...
            'BWpass', num2str(hfdesign.BWpass));
    case 'n,f3db1,f3db2,bwst'
        set(this, ...
            'privFrequencyConstraints', '3db points and stopband width', ...
            'privMagnitudeConstraints', 'unconstrained', ...
            'F3db1',  num2str(hfdesign.F3db1), ...
            'F3db2',  num2str(hfdesign.F3db2), ...
            'BWstop', num2str(hfdesign.BWstop));
    case 'n,fc1,fc2'
        set(this, ...
            'privFrequencyConstraints', '6db points', ...
            'privMagnitudeConstraints', 'unconstrained', ...
            'F6db1',  num2str(hfdesign.Fcutoff1), ...
            'F6db2',  num2str(hfdesign.Fcutoff2));
    case 'n,fc1,fc2,ap1,ast,ap2'
        set(this, ...
            'privFrequencyConstraints', '6dB points', ...
            'privMagnitudeConstraints', 'passband ripples and stopband attenuation', ...
            'F6dB1',  num2str(hfdesign.Fcutoff1), ...
            'F6dB2',  num2str(hfdesign.Fcutoff2),...
            'Apass1', num2str(hfdesign.Apass1), ...
            'Astop',  num2str(hfdesign.Astop), ...
            'Apass2', num2str(hfdesign.Apass2));
    case 'n,fp1,fp2,ap'
        set(this, ...
            'privFrequencyConstraints', 'passband edges', ...
            'privMagnitudeConstraints', 'Passband ripple', ...
            'Fpass1', num2str(hfdesign.Fpass1), ...
            'Fpass2', num2str(hfdesign.Fpass2), ...
            'Apass1', num2str(hfdesign.Apass));
    case 'n,fp1,fp2,ap,ast'
        set(this, ...
            'privFrequencyConstraints', 'passband edges', ...
            'privMagnitudeConstraints', 'Passband ripples and stopband attenuation', ...
            'Fpass1', num2str(hfdesign.Fpass1), ...
            'Fpass2', num2str(hfdesign.Fpass2), ...
            'Astop',  num2str(hfdesign.Astop));
    case 'n,fp1,fst1,fst2,fp2'
        set(this, ...
            'privFrequencyConstraints', 'passband and stopband edges', ...
            'privMagnitudeConstraints', 'unconstrained', ...
            'Fpass1', num2str(hfdesign.Fpass1), ...
            'Fstop1', num2str(hfdesign.Fstop1), ...
            'Fstop2', num2str(hfdesign.Fstop2), ...
            'Fpass2', num2str(hfdesign.Fpass2));
    case 'n,fp1,fst1,fst2,fp2,ap'
        set(this, ...
            'privFrequencyConstraints', 'passband and stopband edges', ...
            'privMagnitudeConstraints', 'Passband ripple', ...
            'Fpass1', num2str(hfdesign.Fpass1), ...
            'Fstop1', num2str(hfdesign.Fstop1), ...
            'Fstop2', num2str(hfdesign.Fstop2), ...
            'Fpass2', num2str(hfdesign.Fpass2), ...
            'Apass1', num2str(hfdesign.Apass));
    case 'n,fst1,fst2,ast'
        set(this, ...
            'privFrequencyConstraints', 'stopband edges', ...
            'privMagnitudeConstraints', 'stopband attenuation', ...
            'Fstop1', num2str(hfdesign.Fstop1), ...
            'Fstop2', num2str(hfdesign.Fstop2), ...
            'Astop',  num2str(hfdesign.Astop));
    otherwise
        error(generatemsgid('IncompleteConstraints'), ...
            'Internal Error: Bandstop ''%s'' incomplete', hfdesign.Specification);
end

abstract_setGUI(this, Hd);

% [EOF]
