<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.9.4.32 $  $Date: 2010/05/20 03:31:05 $ -->
<!-- Copyright 2001-2010 The MathWorks, Inc. -->
<demos>
    <name>Stateflow</name>
    <type>simulink</type>
    <icon>$toolbox/matlab/icons/simulinkicon.gif</icon>
    <description isCdata="no">
        <p>Stateflow(R) は、Simulink(R) を拡張したもので、ステートチャートや        流れ図を開発するための設計環境です。Stateflow ソフトウェアは、         自然で読みやすく、理解しやすい形式で複雑なロジックを        記述するために必要な言語要素を提供します。MATLAB(R)              および Simulink 製品と連携してご利用いただくことで、            制御、監視、モードロジックを含む組み込みシステムの             設計のための効率的な環境を提供します。</p>
    </description>

    <demosection>
        <label>一般的なアプリケーション</label>
        <demoitem>
            <label>列挙型のデータタイプを使った CD プレーヤー/ラジオのモデリング</label>
            <file>html/sf_cdplayer.html</file>
            <callback>sf_cdplayer</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>セキュリティシステムのモデリング</label>
            <file>html/sf_security.html</file>
            <callback>sf_security</callback>
            <type>model</type>
        </demoitem>
        <!-- Uncomment this when Stateflow can properly participate in CT
        simulations
        <demoitem>
            <label>Stick-Slip Friction</label>
            <file>html/sf_stickslip.html</file>
            <callback>sf_stickslip</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Bridge (card game) Bidding</label>
            <file>html/sf_bridge.html</file>
            <callback>sf_bridge</callback>
            <type>model</type>
        </demoitem>
        -->
        <demoitem>
            <label>Tic-Tac-Flow : 携帯ゲームのモデル</label>
            <file>html/sf_tictacflow.html</file>
            <callback>sf_tictacflow</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>アイコンエディタ GUI</label>
            <file>html/sfediticon.html</file>
            <callback>sfediticon</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>サーバー待ち行列システム</label>
            <file>html/sf_server.html</file>
            <callback>sf_server</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>固定小数点のマンデルブロ集合</label>
            <file>html/sf_mandelbrot_fixpt.html</file>
            <callback>sf_mandelbrot_fixpt</callback>
            <type>model</type>
        </demoitem>
        <!--
        <demoitem>
            <label>Tetris</label>
            <file>html/sf_tetris.html</file>
            <callback>sf_tetris</callback>
            <type>model</type>
        </demoitem>
        -->
        <demoitem>
            <label>テトリス</label>
            <file>html/sf_tetris2.html</file>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Truth-Table ブロックを使った家の環境制御</label>
            <file>html/sf_climate_control.html</file>
            <callback>sf_climate_control</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>テンポラルロジックを使ったバンバン制御</label>
            <file>html/sf_boiler.html</file>
            <callback>sf_boiler</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Mealy と Moore チャートを使ったシーケンス認識</label>
            <file>html/sf_seqrec.html</file>
            <callback>sf_seqrec</callback>
            <type>model</type>
        </demoitem>
    </demosection>

    <demosection>
        <label>自動車アプリケーション</label>
        <demoitem>
            <label>自動トランスミッションコントローラのモデリング</label>
            <file>../../simulink/simdemos/automotive/html/sldemo_autotrans.html</file>
            <callback>sf_car</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>フォールトトレラント燃料制御装置のモデリング</label>
            <file>../../simulink/simdemos/automotive/html/sldemo_fuelsys.html</file>
            <callback>sldemo_fuelsys</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>PWM 駆動油圧サーボメカニズムのモデリング</label>
            <file>html/sf_electrohydraulic.html</file>
            <callback>sf_electrohydraulic</callback>
            <type>model</type>
        </demoitem>
    </demosection>

    <demosection>
        <label>航空宇宙アプリケーション</label>
        <demoitem>
            <label>航空機用エレベーターの制御装置の故障管理制御ロジックのモデリング</label>
            <file>html/sf_aircraft.html</file>
            <callback>sf_aircraft</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>起動停止システムのモデリング</label>
            <file>html/sf_launchabort.html</file>
            <callback>sf_launchabort</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>衛星の揺れ (Yo-Yo) 制御</label>
            <file>html/sf_yoyo.html</file>
            <callback>sf_yoyo</callback>
            <type>model</type>
        </demoitem>
    </demosection>

    <demosection>
        <label>大規模なモデリング</label>
        <demoitem>
            <label>チャート内のステートを複数回再利用する (5 分)</label>
            <callback>playbackdemo('reusing-states-using-atomic-subcharts-video-tutorial','toolbox/stateflow/web/demos');</callback>
            <type>video</type>
        </demoitem>
        <demoitem>
            <label>Atomic サブチャートを使用したリダンダント センサーの組み合わせのモデリング</label>
            <file>html/sf_atomic_sensor_pair.html</file>
            <callback>sf_atomic_sensor_pair</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Atomic サブチャートを使用したエレベーター システムのモデリング</label>
            <file>html/sf_elevator.html</file>
            <callback>sf_elevator</callback>
            <type>model</type>
        </demoitem>
    </demosection>
    
    <demosection>
        <label>連続時間モデリング</label>
        <demoitem>
            <label>ゼロクロッシングをもつ整流器のモデリング</label>
            <file>html/sf_abs.html</file>
            <callback>sf_abs</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>弾むボールのモデリング</label>
            <file>html/sf_bounce.html</file>
            <callback>sf_bounce</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>ニュートンのゆりかごのモデリング</label>
            <file>html/sf_newtons_cradle.html</file>
            <callback>sf_newtons_cradle</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>クラッチのモデリング</label>
            <file>html/sf_clutch.html</file>
            <callback>sf_clutch</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>ポケットビリヤードのオープニングショットのモデリング</label>
            <file>html/sf_pool.html</file>
            <callback>sf_pool</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Stateflow で DC モータのモデリング</label>
            <file>html/sf_dcmotor.html</file>
            <callback>sf_dcmotor</callback>
            <type>model</type>
        </demoitem>
    </demosection>

    <demosection>
        <label>機能のデモ</label>
        <demosection>
            <label>結合したアクション</label>
            <demoitem>
                <label>ステート内の結合した Entry、Exit、During アクションの使用</label>
                <file>html/sf_combined_state_actions.html</file>
                <callback>sf_combined_state_actions</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>可変サイズのデータ</label>
            <demoitem>
                <label>可変サイズのデータの使用</label>
                <file>html/sf_variable_size_data.html</file>
                <callback>sf_variable_size_data</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>マルチワードの固定小数点データ</label>
            <demoitem>
                <label>マルチワードの固定小数点データの使用</label>
                <file>html/sf_multiword_fixpt.html</file>
                <callback>sf_multiword_fixpt</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Simulink 関数</label>
            <demoitem>
                <label>Stateflow 内での Simulink 関数の使用</label>
                <file>html/sf_slalgo.html</file>
                <callback>sf_slalgo</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Stateflow を使った Simulink アルゴリズムのスケジューリング</label>
                <file>html/sf_slscheduler.html</file>
                <callback>sf_slscheduler</callback>
                <type>model</type>
            </demoitem>            
            <demoitem>
                <label>スイッチングコントローラを設計するために Stateflow 内で Simulink 関数を使用</label>
                <file>html/sf_slswitch.html</file>
                <callback>sf_slswitch</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>シミュレーションの保存と復元</label>
            <demoitem>
                <label>Stateflow チャートを使ったシミュレーションの保存と復元</label>
                <source>sf_simulation_save_restore</source>
                <file>html/sf_simulation_save_restore.html</file>
                <type>M-file</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>グラフィカル ファンクション</label>
            <demoitem>
                <label>Stateflow のグラフィカル関数の使用</label>
                <file>html/sf_gfdemo.html</file>
                <callback>sf_gfdemo</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>グラフィカル ファンクションのエクスポート</label>
                <file>html/sf_gfexport.html</file>
                <callback>sf_gfexport</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>リカーシブなグラフィカル ファンクション</label>
                <file>html/sf_gfrecursive.html</file>
                <callback>sf_gfrecursive</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>多出力のグラフィカル関数</label>
                <file>html/sf_multioutput.html</file>
                <callback>sf_multioutput</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>テンポラル ロジック</label>
            <demoitem>
                <label>AFTER 関数を使ったテンポラルロジック</label>
                <file>html/sf_tlafter.html</file>
                <callback>sf_tlafter</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>BEFORE 関数を使ったテンポラルロジック</label>
                <file>html/sf_tlbefore.html</file>
                <callback>sf_tlbefore</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>AT 関数を使ったテンポラルロジック</label>
                <file>html/sf_tlat.html</file>
                <callback>sf_tlat</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>EVERY 関数を使ったテンポラルロジック</label>
                <file>html/sf_tlevery.html</file>
                <callback>sf_tlevery</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>絶対時間の時相論理</label>
            <demoitem>
                <label>絶対時間の時相論理の使用</label>
                <file>html/sf_abstemporal_basic.html</file>
                <callback>sf_abstemporal_basic</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Enabled サブシステムに存在する絶対時間の時相論理</label>
                <file>html/sf_abstemporal_enable.html</file>
                <callback>sf_abstemporal_enable</callback>
                <type>model</type>
            </demoitem>                
            <demoitem>
                <label>ゼロクロッシングに存在する絶対時間の時相論理</label>
                <file>html/sf_abstemporal_ct.html</file>
                <callback>sf_abstemporal_ct</callback>
                <type>model</type>
            </demoitem>                
        </demosection>
        <demosection>
            <label>行列I/O</label>
            <demoitem>
                <label>ベクトル化</label>
                <file>html/sf_array.html</file>
                <callback>sf_array</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>行列の入力と出力</label>
                <file>html/sf_matrix.html</file>
                <callback>sf_matrix</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>ループステートメント</label>
            <demoitem>
                <label>IFステートメント</label>
                <file>html/sf_if.html</file>
                <callback>sf_if</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>WHILE ループ</label>
                <file>html/sf_while.html</file>
                <callback>sf_while</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>FORループ</label>
                <file>html/sf_for.html</file>
                <callback>sf_for</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>固定小数点データ</label>
            <demoitem>
                <label>固定小数点の乗算</label>
                <file>html/sf_fxptprecision.html</file>
                <callback>sf_fxptprecision</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>固定小数点変換</label>
                <file>html/sf_fixpt.html</file>
                <callback>sf_fixpt</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>固定小数点グラフィカルファンクション</label>
                <file>html/sf_fxptgf.html</file>
                <callback>sf_fxptgf</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>ワークスペースデータ</label>
            <demoitem>
                <label>ワークスペースからのデータ</label>
                <file>html/sf_fromworkspace.html</file>
                <callback>sf_fromworkspace</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Function Callの出力</label>
            <demoitem>
                <label>Function Call の出力を使った Stateflow からの Function Call Subsystem とチャートの駆動</label>
                <file>html/sf_eventfcn.html</file>
                <callback>sf_eventfcn</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Function Call の出力を使った複数のチャートの駆動</label>
                <file>html/sf_multfuncout.html</file>
                <callback>sf_multfuncout</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>カスタム C-コード</label>
            <demoitem>
                <label>カスタム C コード関数と構造体のインクルード</label>
                <file>html/sf_custom.html</file>
                <callback>sf_custom</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>カスタム C++ コードのインクルード</label>
                <file>html/sf_cpp.html</file>
                <callback>sf_cpp</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Stateflow のバスサポート</label>
            <demoitem>
                <label>Simulink バス信号のインタフェースとカスタム C コードの統合</label>
                <file>html/sfbus_demo.html</file>
                <callback>sfbus_demo</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>変更の検出</label>
            <demoitem>
                <label>変更の検出</label>
                <file>html/sf_change_detection.html</file>
                <callback>sf_change_detection</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>行列の変更を検出</label>
                <file>html/sf_change_detection_vector.html</file>
                <callback>sf_change_detection_vector</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Superstep</label>
            <demoitem>
                <label>Superstep</label>
                <file>html/sf_superstep.html</file>
                <callback>sf_superstep</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Superstep サイクル (エラー発生)</label>
                <file>html/sf_superstep_cycle_error.html</file>
                <callback>sf_superstep_cycle_error</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Superstep サイクル (続行)</label>
                <file>html/sf_superstep_cycle_proceed.html</file>
                <callback>sf_superstep_cycle_proceed</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>信号オブジェクトの関連付け</label>
            <demoitem>
                <label>信号オブジェクトの関連付け</label>
                <file>html/sf_resolve_signal_object.html</file>
                <callback>sf_resolve_signal_object</callback>
                <type>model</type>
            </demoitem>
        </demosection>
    </demosection>
</demos>
