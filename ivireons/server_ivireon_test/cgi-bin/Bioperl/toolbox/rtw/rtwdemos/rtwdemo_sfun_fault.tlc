%% File : rtwdemo_sfun_fault.tlc
%%
%% Description: 
%%   Real-Time Workshop TLC Code Generation file for rtwdemo_sfun_fault
%%
%% Simulink version      : 7.6 (R2010b) 28-Jun-2010
%% TLC file generated on : 30-Jun-2010 02:25:12

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'rtwdemo_sfun_fault';
     def.InitializeConditionsFcnSpec = 'initFaultCounter(uint32 work2[1])';
     def.OutputFcnSpec = 'incAndLogFaultCounter(void *work1, uint32 work2[1], double u1)';
     def.StartFcnSpec = 'openLogFile(void **work1)';
     def.TerminateFcnSpec = 'closeLogFile(void **work1)';
     def.HeaderFiles = {'fault.h'};
     def.SourceFiles = {'fault.c'};
     def.IncPaths = {'sldemo_lct_src'};
     def.SrcPaths = {'sldemo_lct_src'};
     def.Options.useTlcWithAccel = false;
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements rtwdemo_sfun_fault "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %<LibAddToCommonIncludes("fault.h")>
  %<SLibAddToStaticSources("fault.c")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction

%% Function: Start ========================================================
%%
%function Start(block, system) Output
  %%
  %assign work1_ptr = "&"+LibBlockPWork(0, "", "", 0)
  %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
  openLogFile( %<work1_ptr>);
  %%
%endfunction

%% Function: InitializeConditions  ========================================
%%
%function InitializeConditions (block, system) Output
  %%
  %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
  %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
  initFaultCounter( %<work2_ptr>);
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %assign u1_val = LibBlockInputSignal(0, "", "", 0)
  %assign work1_val = LibBlockPWork(0, "", "", 0)
  %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
  %%
  incAndLogFaultCounter( %<work1_val>, %<work2_ptr>, (real_T)%<u1_val>);
  %%
%endfunction

%% Function: Terminate ====================================================
%%
%function Terminate(block, system) Output
  %%
  %assign work1_ptr = "&"+LibBlockPWork(0, "", "", 0)
  %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
  closeLogFile( %<work1_ptr>);
  %%
%endfunction

%% [EOF]
