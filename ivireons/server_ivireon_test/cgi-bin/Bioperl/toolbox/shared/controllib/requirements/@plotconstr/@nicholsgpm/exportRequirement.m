function Req = exportRequirement(this) 
% EXPORTREQUIREMENT  method to convert plotconstr object to equivalent
% srorequirement object
%
% Overloaded from parent designconstr.exportRequirement as want to separate
% into two separate requirements if requirement is both gain and phase 
% margin requirement as this is better handled as two requirements by 
% optimization.
 
% Author(s): A. Stothert
% Copyright 2009 The MathWorks, Inc.
% $Revision: 1.1.8.1 $ $Date: 2009/10/16 06:32:02 $

%Create separate srorequirement objects for gain and phase, this is
%so that each can be normalized independently.

Req = handle(nan(1,1));
gainphase = this.Data.Type;
if strcmp(gainphase,'gain') || strcmp(gainphase,'both')
    %Create Gain margin requirement only
    Req = srorequirement.gainphasemargin(...
        'Name', 'Gain margin bound', ...
        'isEnabled', true, ...
        'NormalizeValue', this.Data.yCoords, ...
        'FeedbackSign', 1);
    %Set data properties of srorequirement object
    Req.setData(...
        'Type',   'gain', ...
        'YData',   this.Data.yCoords, ...
        'Weight',  this.Weight, ...
        'yUnits',  this.Data.yUnits);
end
if strcmp(gainphase,'phase') || strcmp(gainphase,'both')
    %Create Phase margin constraint only
    if ishandle(Req)
        idx = 2;
    else
        idx = 1;
    end
    Req(idx,1) = srorequirement.gainphasemargin(...
        'Name', 'Phase margin bound', ...
        'isEnabled', true, ...
        'NormalizeValue', this.Data.xCoords, ...
        'FeedbackSign', 1);
    %Set data properties of srorequirement object
    Req(idx,1).setData(...
        'Type',   'phase', ...
        'XData',   this.Data.xCoords, ...
        'Weight',  this.Weight, ...
        'xUnits',  this.Data.xUnits);
end
