function render(Constr)
%RENDER sets the vertices, X and Y data properties of the patch and markers.
%Note: This is a default renderer, it always renders rectangular patches
%      for the chosen axes units. May have to overload for specific axes
%      types, e.g., bode.

%   Author(s): A. Stothert
%   Copyright 2006-2009 The MathWorks, Inc.
%   $Revision: 1.1.8.1 $  $Date: 2009/10/16 06:34:02 $

%Check that we have a valid constraint to render
if ~Constr.isValid
   return
else
   %Make sure we've a valid selected edge
   nConstr = size(Constr.getData('xCoords'),1);
   EdgeColor  = Constr.EdgeColor;
   PatchColor = Constr.PatchColor;
   SE = Constr.getData('SelectedEdge');
   SE = SE(SE <= nConstr);
   Constr.setData('SelectedEdge', SE);
end

numP = 50;  %Number of points to use along each edge

hGroup  = Constr.Elements;
HostAx  = handle(hGroup.Parent);
HostFig = double(HostAx.Parent);

if ~Constr.Activated
    % Initialize when constraint is not activated yet (preset for Activated=1)
    % Construct the constraint patch and edge
    % RE: The edge is the only object visible to the limit picker
    cMenu = Constr.addmenu(HostFig);
    btnDownFcn = Constr.ButtonDownFcn;
    hPatchUpper = patch( ...
       'Parent',double(hGroup),...
       'XlimInclude', 'off',...
       'YlimInclude', 'off',...
       'ZlimInclude', 'on', ...
       'LineWidth', 0.5, ...
       'LineStyle', 'none',...
       'FaceAlpha', 0.75, ...
       'CDataMapping','Direct', ...
       'HelpTopicKey', Constr.HelpData.CSHTopic,...
       'UIContextMenu', cMenu,...
       'ButtonDownFcn', Constr.ButtonDownFcn,...
       'HitTest','on', ...
       'Visible','off',...
       'Tag','ConstraintPatch');
    hPatchLower = patch( ...
       'Parent',double(hGroup),...
       'XlimInclude', 'off',...
       'YlimInclude', 'off',...
       'ZlimInclude', 'on', ...
       'LineWidth', 0.5, ...
       'LineStyle', 'none',...
       'FaceAlpha', 0.75, ...
       'CDataMapping','Direct', ...
       'HelpTopicKey', Constr.HelpData.CSHTopic,...
       'UIContextMenu',cMenu,...
       'ButtonDownFcn',Constr.ButtonDownFcn,...
       'HitTest','on', ...
       'Visible','off',...
       'Tag','ConstraintPatch');

    % Edge line to delimit extent for limit picker
    hEdgeUpper = line(...
       'Parent',double(hGroup),...
       'LineWidth', 2, ...
       'LineStyle', 'none', ...
       'HitTest', 'on',...
       'HelpTopicKey', Constr.HelpData.CSHTopic,...
       'UIContextMenu', cMenu,...
       'ButtonDownFcn', btnDownFcn,...
       'Tag', 'ConstraintInfeasibleEdge', ...
       'Visible', 'off',...
       'XlimInclude', 'on',...
       'YlimInclude', 'on', ...
       'ZlimInclude', 'on');
    hEdgeLower = line(...
       'Parent',double(hGroup),...
       'LineWidth', 2, ...
       'LineStyle', 'none', ...
       'HitTest', 'on',...
       'HelpTopicKey', Constr.HelpData.CSHTopic,...
       'UIContextMenu', cMenu,...
       'ButtonDownFcn', btnDownFcn,...
       'Tag', 'ConstraintInfeasibleEdge', ...
       'Visible', 'off',...
       'XlimInclude', 'on',...
       'YlimInclude', 'on', ...
       'ZlimInclude', 'on');
    
    % Construct the resize markers
    hMarker = line(...
       'Parent',double(hGroup),...
       'LineStyle','none', ...
       'Marker','s', ...
       'MarkerSize',4, ...
       'MarkerFaceColor','k', ...
       'MarkerEdgeColor','k', ...
       'HitTest', 'on', ...
       'ButtonDownFcn', btnDownFcn,...
       'Tag','ConstraintMarkers',...
       'Visible','off',...
       'XlimInclude','off',...
       'YlimInclude','off',...
       'ZlimInclude','on');
end

%Find the bounding polygon with extended bounds marking the infeasible
%region
[vertX, vertY, XData, YData] = Constr.getConstrPoly(numP);
Zlevel = Constr.Zlevel;  %Z coordinates for layering

%Draw the polygon
hChildren = hGroup.Children;
Tags = get(hChildren,'Tag');
idx = find(strcmp(Tags,'ConstraintPatch'));
for ct = 1:2
   vertZ = Zlevel*ones(size(vertX{ct}));
   Vertices = [vertX{ct}(:), vertY{ct}(:), vertZ(:)];
   Faces = 1:numel(vertX{ct});
   set(hChildren(idx(ct)),...
      'Vertices',  Vertices,...
      'Faces',     Faces, ...
      'visible',   'on',...
      'FaceColor', PatchColor, ...
      'EdgeColor', EdgeColor)
end

% Position 'edge' line
idx = find(strcmp(Tags,'ConstraintInfeasibleEdge'));
for ct = 1:2
   ZData = Zlevel*ones(size(XData{ct}))+0.1;
   set(hChildren(idx(ct)),...
      'XData',   XData{ct}(:),...
      'YData',   YData{ct}(:),...
      'ZData',   ZData(:),...
      'Color',   PatchColor, ...
      'Visible', 'on')
end

% Position 'edge piece lines
idx = strcmp(Tags,'ConstraintPieceEdge');
while sum(idx) < nConstr
   %Not enough edge pieces
   localCreateEdgePiece(Constr)
   hChildren = hGroup.Children;
   Tags = get(hChildren,'Tag');
   idx = strcmp(Tags,'ConstraintPieceEdge');
end
while sum(idx) > nConstr
   %Too many edge pieces
   delete(hChildren(find(idx,1,'first')))
   hChildren = hGroup.Children;
   Tags = get(hChildren,'Tag');
   idx = strcmp(Tags,'ConstraintPieceEdge');
end
ind = find(idx);
Weights = Constr.Data.getData('Weight');
X = [XData{1}, XData{2}];
Y = [YData{1}, YData{2}];
Z = Zlevel*ones(size(X))+0.1;
for ct = 1:nConstr
   if Weights(ct) > 0
      isVisible = 'on';
   else
      isVisible = 'off';
   end
   set(hChildren(ind(ct)),...
      'XData',     X(:,ct),...
      'YData',     Y(:,ct),...
      'ZData',     Z(:,ct),...
      'Color',     EdgeColor, ...
      'LineWidth', Weights(ct)*2+eps, ...
      'Visible',   isVisible)
end

% Position resize markers
XData = Constr.Data.getData('xData');
XData = XData(SE,:);
XData = unitconv(XData(:),Constr.Data.getData('xUnits'),Constr.xDisplayUnits);
YData = Constr.Data.getData('yData');
YData = YData(SE,:);
YData = unitconv(YData(:),Constr.Data.getData('yUnits'),Constr.yDisplayUnits);
ZData = Zlevel*ones(size(XData));
idx = strcmp(Tags,'ConstraintMarkers');
set(hChildren(idx),...
   'XData', XData,...
   'YData', YData,...
   'Zdata', ZData );
% Marker visibility
set(hChildren(idx),'Visible',Constr.Selected)

%--------------------------------------------------------------------------
function localCreateEdgePiece(Constr)

hGroup = Constr.Elements;
hPiece = line(...
   'Parent',double(hGroup),...
   'LineWidth', 1, ...
   'HitTest','off',...
   'UIContextMenu','',...
   'ButtonDownFcn','',...
   'Tag','ConstraintPieceEdge', ...
   'Visible','off',...
   'XlimInclude','off',...
   'YlimInclude','off',...
   'ZlimInclude','on');

