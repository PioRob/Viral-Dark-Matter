function data = logInputSignals(obj, varargin)        

%   Copyright 2009-2010 The MathWorks, Inc.
    
    system = varargin{1};    
    [systemH, errStr] = Sldv.utils.getObjH(system); 
    
    if ~isempty(errStr) || ...                        
            ~(strcmp(get_param(systemH,'Type'),'block_diagram') || ...
              (strcmp(get_param(systemH,'Type'),'block') && strcmp(get_param(systemH,'BlockType'),'ModelReference'))) || ... 
            (strcmp(get_param(systemH,'Type'),'block_diagram') && strcmp(get_param(systemH,'BlockDiagramType'),'library'))
        msgId = 'InvalidFirstInput';
        msg = xlate(['Invalid usage of %s. ', ...
               'First input must specify a either a Model block ', ...
               'or Simulink harness model generated by sldvmakeharness or slvnvmakeharness. %s']);
        obj.handleMsg('error', msgId, msg, obj.UtilityName, errStr);
    end        
    
    if strcmp(get_param(systemH,'Type'),'block_diagram')
        modelH = systemH;
        if ~Sldv.HarnessUtils.isSldvGenHarness(modelH)
            msgId = 'InvalidHarness';
            msg = xlate(['Invalid usage of %s. ', ...
                   'The first argument of %s can specify a block diagram ', ...
                   'only if it is a Simulink harness model generated by sldvmakeharness or slvnvmakeharness.']);                                      
            obj.handleMsg('error', msgId, msg, obj.UtilityName, obj.UtilityName);
        end        
        obj.SldvHarnessModelH = modelH;
        obj.TopLevelModelH = modelH;
        obj.SigBlockH =  Sldv.HarnessUtils.sigbuild_handle(obj.TopLevelModelH);  
        obj.checkImplicitTcIdx;        
    else
        blockH = systemH;
        if ~strcmp(get_param(blockH,'ProtectedModel'),'off')
            msgId = 'ModelBlockProtectedModel';
            msg   = xlate(['The first argument of %s ', ...
                    'cannot specify Model blocks referencing ', ...
                    'protected models.']);
            obj.handleMsg('error', msgId, msg, obj.UtilityName);
        end
        portH = get_param(blockH,'PortHandles');
        if ~isempty(portH.Trigger)
            msgId = 'ModelBlockTriggerPort';
            msg   = xlate(['The first argument of %s ', ...
                    'cannot specify Model blocks referencing ', ...
                    'triggered models.']);
            obj.handleMsg('error', msgId, msg, obj.UtilityName);
        end
        obj.ModelBlockH = blockH;
        obj.TopLevelModelH = bdroot(blockH);
        if Sldv.HarnessUtils.isSldvGenHarness(obj.TopLevelModelH)
            obj.SldvHarnessModelH = obj.TopLevelModelH;
            obj.SigBlockH =  Sldv.HarnessUtils.sigbuild_handle(obj.TopLevelModelH);  
            [~, ~, ~, grp] = signalbuilder(obj.SigBlockH);
            numTestCases = length(grp);
            obj.TcIdx = 1:numTestCases;
        end
    end                
          
    val = varargin{2};
    if ~isempty(val)
        if isempty(obj.SldvHarnessModelH)
            msgId = 'TcIdxHarness';
            msg   = xlate(['Invalid usage of %s. ', ...
                    'testCaseIndex parameter can be specified only if ', ...
                    'first argument of %s specifies a harness model ',...
                    'generated by sldvmakeharness or slvnvmakeharness or it specifies ',...
                    'a Model block located in a harness model again generated ',...
                    'by sldvmakeharness or slvnvmakeharness.']);
            obj.handleMsg('error', msgId, msg, obj.UtilityName, obj.UtilityName);                 
        end
        msg   = xlate(['Invalid usage of %s. ', ...                           
                       'The testCaseIndex must specify a single index or ', ...                           
                       'array indexes whose value''s must be less than or ', ...
                       'equal to the number of signal groups on the Signal ', ...
                       'Builder block ''%s'' in this configuration.']); 
        if ~strcmp(class(val),'double')
            msgId = 'TcIdxVal';                        
            obj.handleMsg('error', msgId, msg, obj.UtilityName, getfullname(obj.SigBlockH));   
        end   
        [~, ~, ~, grp] = signalbuilder(obj.SigBlockH);
        numTestCases = length(grp);
        if any(val>numTestCases) || any(val<1)
            msgId = 'TcIdxVal';
            msg   = xlate(['Invalid usage of %s. ', ...   
                    'Invalid value for testCaseIndex parameter. ', ...
                    'testCaseIndex parameter must specify a single index or ', ...
                    'array indexes whose value''s must be less than or ', ...
                    'equal to the number of signal groups on the Signal ', ...
                    'Builder block ''%s''.']);
            obj.handleMsg('error', msgId, msg, obj.UtilityName, getfullname(obj.SigBlockH));       
        end
        obj.TcIdx = sort(val);     
    end
            
    % After this point hard errors are risky because we will load models and
    % changed models. If an error occurs we should error out clearly.    
    try        
        obj.deriveConvBlockH;
        obj.deriveTestUnitBlockH;
        obj.checkImplicitTcIdx;
        obj.checkImplicitModelRefHarness;
        
        obj.checkStartTimeTopLevel;
        obj.configureAutoSaveState;
        
        % Start loading models if necessary        
        obj.deriveReferencedModelH;  
        obj.checkForArrayOfBuses;
        obj.checkRefModelSolverType;
        obj.loadHarnessGeneratedMdl;
        
        % Store original model configurations
        obj.storeOriginalModelParams;
        obj.derivePortHandlesToLog;
        obj.cacheExistingLoggers;                
        
        %Start Simulation
        obj.runTests;                
    catch Mex       
        internalError = strmatch(obj.MsgIdPref,Mex.identifier);
        if isempty(internalError) || internalError~=1
            % Reset session data only for unknown errors. Otherwise session
            % is already cleared.
            obj.resetSessionData;       
        end        
        rethrow(Mex);
    end
        
    data = obj.LoggedData;
    obj.resetSessionData;
end

% LocalWords:  sldvmakeharness slvnvmakeharness
