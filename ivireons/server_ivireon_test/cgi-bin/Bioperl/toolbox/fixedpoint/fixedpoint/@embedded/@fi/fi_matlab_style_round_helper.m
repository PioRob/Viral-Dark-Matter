function Y = fi_matlab_style_round_helper(A, str_rnd_type, num_bit_grow)
%FI_MATLAB_STYLE_ROUND_HELPER Internal use only helper function
%   See also EMBEDDED.FI/CEIL, EMBEDDED.FI/CONVERGENT, EMBEDDED.FI/FIX, 
%            EMBEDDED.FI/FLOOR, EMBEDDED.FI/NEAREST, EMBEDDED.FI/ROUND

%   Y = FI_MATLAB_STYLE_ROUND_HELPER(A, STR_RND_TYPE, NUM_BIT_GROW)
%   performs MATLAB style rounding on input fi object A and returns the 
%   result in fi object Y. 
%
%   The input string STR_RND_TYPE can be 'ceil', 'convergent', 'fix',
%   'floor', 'nearest' or 'round', depending on which the specific rounding 
%   method to be applied is selected.
%
%   NUM_BIT_GROW should be set to 1 if the rounding method specified is 
%   CEIL, CONVERGENT, NEAREST or ROUND and to 0 if the rounding method 
%   specified is FIX or FLOOR.
%
%   FI_MATLAB_STYLE_ROUND_HELPER does not support fi objects with nontrivial
%   slope and bias scaling. Slope and bias scaling is trivial when the slope
%   is an integer power of 2 and the bias is zero.

%   Copyright 2007-2008 The MathWorks, Inc.
%   $Revision: 1.1.6.2 $  $Date: 2008/11/13 17:56:27 $


if isslopebiasscaled(numerictype(A))
    % Slope bias scaled inputs are not supported

    error(['fixedpoint:fi:' str_rnd_type ':nosupportforslopebiasinputs'],...
            'Slope bias scaled inputs are not supported');
    
elseif isboolean(A) ||(isfixed(A) &&(A.fractionlength <= 0))
    
    % The output Y is identical to the input A in the cases where:
    %   1) DataType of A is 'Boolean' or,
    %   2) DataType of A is 'Fixed' and its fraction length is zero or 
    %      negative.

    Y = A;
        
elseif isfloat(A)
    % If A has DataType 'Single' or 'Double', the output has the same 
    % numerictype and fimath as A, and its value is evaluated by applying the 
    % appropriate MATLAB built-in rounding method to the double-precision 
    % real-world value of A. 

    Y = fi(feval(str_rnd_type, double(A)), numerictype(A), fimath(A));
    
elseif isfixed(A)
    % If A has DataType 'Fixed', and its fraction length is positive, the 
    % output is generated by the subfunction ROUND_INTERNAL_FI    

    Y = round_internal_fi(A, str_rnd_type, num_bit_grow);
    
elseif isscaleddouble(A)
    % If A has DataType 'Scaleddouble', the output numerictype is evaluated 
    % according to the internal rules by the subfunction GET_OUT_NUMERICTYPE.
    % The output value is evaluated by applying the appropriate MATLAB built-in
    % rounding method to the double-precision real-world value of A
 
    Y = fi(feval(str_rnd_type, double(A)), ...
        get_out_numerictype(numerictype(A), num_bit_grow), fimath(A)); 
    
end

% If the input fi is fimath-less then the output should also be a fimath-less fi.
Y.fimathislocal = isfimathlocal(A);


function Z = round_internal_fi(X, str_rnd_type, num_bit_grow)
%ROUND_INTERNAL_FI Round fi objects with DataType 'Fixed'
%   Z = ROUND_INTERNAL_FI(X, STR_RND_TYPE, NUM_BIT_GROW), performs MATLAB
%   style rounding on input fi object X and returns the result in fi object 
%   Z. X is expected to have DataType 'Fixed'. 
%
%   The input string STR_RND_TYPE can be 'ceil', 'convergent', 'fix',
%   'floor', 'nearest' or 'round', depending on which the specific rounding 
%   method to be applied is selected.
%
%   NUM_BIT_GROW should be set to 1 if the rounding method specified is 
%   CEIL, CONVERGENT, NEAREST or ROUND and to 0 if the rounding method 
%   specified is FIX or FLOOR.
%
%   The output Z has the same fimath as input X. The numerictype of Z is
%   determined based on internal rules by the subfunction 
%   GET_OUT_NUMERICTYPE.

    tOut = get_out_numerictype(numerictype(X), num_bit_grow);

    f = fimath(X);

    orig_round_mode = f.roundmode;

    different_modes = ~strcmp(orig_round_mode, str_rnd_type);
    
    if different_modes
        
        f.roundmode = str_rnd_type;
        
    end

    Z = fi([],tOut,f);

    Z.copydata(X);

    if different_modes
        
        Z.roundmode = orig_round_mode;
        
    end

    
    
function tOut = get_out_numerictype(tIn, num_bit_grow)
%GET_OUT_NUMERICTYPE Generate appropriate numerictype for output
%   TOUT = GET_OUT_NUMERICTYPE(TIN, NUM_BIT_GROW) generates the appropriate
%   numerictype for the output of MATLAB style rounding on a fi object 
%   with numerictype TIN. TIN is expected to have DataType 'Fixed' or 
%   'ScaledDouble'. 
%
%   If the fraction length of TIN is zero or negative, TIN is already an
%   integer numerictype, and TOUT is the same as TIN.
%
%   If the fraction length of TIN is positive, the fraction length of TOUT
%   is 0, its signedness is the same as that of TIN, and its word length is
%   the difference between the word length and fraction length of TIN, plus
%   NUM_BIT_GROW bits. If TIN is signed, then the minimum word length of  
%   TOUT is 2. If TIN is unsigned, then the minimum word length of TOUT 
%   is 1.

    tOut = tIn;
    
    if tIn.fractionlength > 0
        
        tOut.wordlength = max((tIn.wordlength - tIn.fractionlength + num_bit_grow), ...
                            (1 + double(tIn.signed)));
                        
        tOut.fractionlength = 0;
        
    end
