<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.9.4.32 $  $Date: 2010/05/20 03:31:05 $ -->
<!-- Copyright 2001-2010 The MathWorks, Inc. -->
<demos>
    <name>Stateflow</name>
    <type>simulink</type>
    <icon>$toolbox/matlab/icons/simulinkicon.gif</icon>
    <description isCdata="no">
        <p>Stateflow&#174; extends Simulink&#174; with a design environment
        for developing state charts and flow diagrams. Stateflow software 
        provides the language elements required to describe complex logic
        in a natural, readable, and understandable form. It is tightly
        integrated with MATLAB&#174; and Simulink products, providing an
        efficient environment for designing embedded systems that contain
        control, supervisory, and mode logic.</p>
    </description>

    <demosection>
        <label>General Applications</label>
        <demoitem>
            <label>Modeling a CD Player/Radio Using Enumerated Data Types</label>
            <file>html/sf_cdplayer.html</file>
            <callback>sf_cdplayer</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Modeling a Security System</label>
            <file>html/sf_security.html</file>
            <callback>sf_security</callback>
            <type>model</type>
        </demoitem>
        <!-- Uncomment this when Stateflow can properly participate in CT
        simulations
        <demoitem>
            <label>Stick-Slip Friction</label>
            <file>html/sf_stickslip.html</file>
            <callback>sf_stickslip</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Bridge (card game) Bidding</label>
            <file>html/sf_bridge.html</file>
            <callback>sf_bridge</callback>
            <type>model</type>
        </demoitem>
        -->
        <demoitem>
            <label>Tic-Tac-Flow : Model of a Hand-held Game</label>
            <file>html/sf_tictacflow.html</file>
            <callback>sf_tictacflow</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Icon Editor GUI</label>
            <file>html/sfediticon.html</file>
            <callback>sfediticon</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Server Queueing System</label>
            <file>html/sf_server.html</file>
            <callback>sf_server</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Fixed-Point Mandelbrot Set</label>
            <file>html/sf_mandelbrot_fixpt.html</file>
            <callback>sf_mandelbrot_fixpt</callback>
            <type>model</type>
        </demoitem>
        <!--
        <demoitem>
            <label>Tetris</label>
            <file>html/sf_tetris.html</file>
            <callback>sf_tetris</callback>
            <type>model</type>
        </demoitem>
        -->
        <demoitem>
            <label>Tetris</label>
            <file>html/sf_tetris2.html</file>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Home Climate Control Using the Truth-Table Block</label>
            <file>html/sf_climate_control.html</file>
            <callback>sf_climate_control</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Bang-Bang Control Using Temporal Logic</label>
            <file>html/sf_boiler.html</file>
            <callback>sf_boiler</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Sequence Recognition Using Mealy and Moore Charts</label>
            <file>html/sf_seqrec.html</file>
            <callback>sf_seqrec</callback>
            <type>model</type>
        </demoitem>
    </demosection>

    <demosection>
        <label>Automotive Applications</label>
        <demoitem>
            <label>Modeling an Automatic Transmission Controller</label>
            <file>../../simulink/simdemos/automotive/html/sldemo_autotrans.html</file>
            <callback>sf_car</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Modeling a Fault-Tolerant Fuel Control System</label>
            <file>../../simulink/simdemos/automotive/html/sldemo_fuelsys.html</file>
            <callback>sldemo_fuelsys</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Modeling a PWM Driven Hydraulic Servomechanism</label>
            <file>html/sf_electrohydraulic.html</file>
            <callback>sf_electrohydraulic</callback>
            <type>model</type>
        </demoitem>
    </demosection>

    <demosection>
        <label>Aerospace Applications</label>
        <demoitem>
            <label>Modeling Fault Management Control Logic in an Aircraft Elevator Control System</label>
            <file>html/sf_aircraft.html</file>
            <callback>sf_aircraft</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Modeling a Launch Abort System</label>
            <file>html/sf_launchabort.html</file>
            <callback>sf_launchabort</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Yo-Yo Control of Satellites</label>
            <file>html/sf_yoyo.html</file>
            <callback>sf_yoyo</callback>
            <type>model</type>
        </demoitem>
    </demosection>

    <demosection>
        <label>Large-Scale Modeling</label>
        <demoitem>
            <label>Reusing States Multiple Times in a Chart (5 min)</label>
            <callback>playbackdemo('reusing-states-using-atomic-subcharts-video-tutorial','toolbox/stateflow/web/demos');</callback>
            <type>video</type>
        </demoitem>
        <demoitem>
            <label>Modeling a Redundant Sensor Pair Using Atomic Subcharts</label>
            <file>html/sf_atomic_sensor_pair.html</file>
            <callback>sf_atomic_sensor_pair</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Modeling an Elevator System Using Atomic Subcharts</label>
            <file>html/sf_elevator.html</file>
            <callback>sf_elevator</callback>
            <type>model</type>
        </demoitem>
    </demosection>
    
    <demosection>
        <label>Continuous Time Modeling</label>
        <demoitem>
            <label>Modeling a Rectifier With Zero Crossings</label>
            <file>html/sf_abs.html</file>
            <callback>sf_abs</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Modeling a Bouncing Ball</label>
            <file>html/sf_bounce.html</file>
            <callback>sf_bounce</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Modeling Newton's Cradle</label>
            <file>html/sf_newtons_cradle.html</file>
            <callback>sf_newtons_cradle</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Modeling a Clutch</label>
            <file>html/sf_clutch.html</file>
            <callback>sf_clutch</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Modeling the Opening Shot in Pool</label>
            <file>html/sf_pool.html</file>
            <callback>sf_pool</callback>
            <type>model</type>
        </demoitem>
        <demoitem>
            <label>Modeling a DC Motor in Stateflow</label>
            <file>html/sf_dcmotor.html</file>
            <callback>sf_dcmotor</callback>
            <type>model</type>
        </demoitem>
    </demosection>

    <demosection>
        <label>Feature Demonstrations</label>
        <demosection>
            <label>Combined Actions</label>
            <demoitem>
                <label>Using Combined Entry, Exit and During Actions in States</label>
                <file>html/sf_combined_state_actions.html</file>
                <callback>sf_combined_state_actions</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Variable-size Data</label>
            <demoitem>
                <label>Using Variable-size Data</label>
                <file>html/sf_variable_size_data.html</file>
                <callback>sf_variable_size_data</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Multiword fixed-point data</label>
            <demoitem>
                <label>Using Multiword Fixed-point Data</label>
                <file>html/sf_multiword_fixpt.html</file>
                <callback>sf_multiword_fixpt</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Simulink Functions</label>
            <demoitem>
                <label>Using Simulink Functions in Stateflow</label>
                <file>html/sf_slalgo.html</file>
                <callback>sf_slalgo</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Scheduling Simulink Algorithms Using Stateflow</label>
                <file>html/sf_slscheduler.html</file>
                <callback>sf_slscheduler</callback>
                <type>model</type>
            </demoitem>            
            <demoitem>
                <label>Using Simulink Functions in Stateflow to Design Switching Controllers</label>
                <file>html/sf_slswitch.html</file>
                <callback>sf_slswitch</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Simulation Save and Restore</label>
            <demoitem>
                <label>Simulation Save and Restore with Stateflow Charts</label>
                <source>sf_simulation_save_restore</source>
                <file>html/sf_simulation_save_restore.html</file>
                <type>M-file</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Graphical Functions</label>
            <demoitem>
                <label>Using Graphical Functions in Stateflow</label>
                <file>html/sf_gfdemo.html</file>
                <callback>sf_gfdemo</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Exporting a Graphical Function</label>
                <file>html/sf_gfexport.html</file>
                <callback>sf_gfexport</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Recursive Graphical Functions</label>
                <file>html/sf_gfrecursive.html</file>
                <callback>sf_gfrecursive</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Multi Output Graphical Functions</label>
                <file>html/sf_multioutput.html</file>
                <callback>sf_multioutput</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Temporal Logic</label>
            <demoitem>
                <label>Temporal Logic Using the AFTER Function</label>
                <file>html/sf_tlafter.html</file>
                <callback>sf_tlafter</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Temporal Logic Using the BEFORE Function</label>
                <file>html/sf_tlbefore.html</file>
                <callback>sf_tlbefore</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Temporal Logic Using the AT Function</label>
                <file>html/sf_tlat.html</file>
                <callback>sf_tlat</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Temporal Logic Using the EVERY Function</label>
                <file>html/sf_tlevery.html</file>
                <callback>sf_tlevery</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Absolute Time Temporal Logic</label>
            <demoitem>
                <label>Using Absolute Time Temporal Logic</label>
                <file>html/sf_abstemporal_basic.html</file>
                <callback>sf_abstemporal_basic</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Absolute Time Temporal Logic in the Presence of Enabled Subsystems</label>
                <file>html/sf_abstemporal_enable.html</file>
                <callback>sf_abstemporal_enable</callback>
                <type>model</type>
            </demoitem>                
            <demoitem>
                <label>Absolute Time Temporal Logic in the Presence of Zero Crossings</label>
                <file>html/sf_abstemporal_ct.html</file>
                <callback>sf_abstemporal_ct</callback>
                <type>model</type>
            </demoitem>                
        </demosection>
        <demosection>
            <label>Matrix I/O</label>
            <demoitem>
                <label>Vectorization</label>
                <file>html/sf_array.html</file>
                <callback>sf_array</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Matrix Input and Output</label>
                <file>html/sf_matrix.html</file>
                <callback>sf_matrix</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Loop Statements</label>
            <demoitem>
                <label>IF Statement</label>
                <file>html/sf_if.html</file>
                <callback>sf_if</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>WHILE Loops</label>
                <file>html/sf_while.html</file>
                <callback>sf_while</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>FOR Loops</label>
                <file>html/sf_for.html</file>
                <callback>sf_for</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Fixed-Point Data</label>
            <demoitem>
                <label>Fixed-Point Multiplication</label>
                <file>html/sf_fxptprecision.html</file>
                <callback>sf_fxptprecision</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Fixed-Point Conversion</label>
                <file>html/sf_fixpt.html</file>
                <callback>sf_fixpt</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Fixed-Point Graphical Functions</label>
                <file>html/sf_fxptgf.html</file>
                <callback>sf_fxptgf</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Workspace Data</label>
            <demoitem>
                <label>Data From Workspace</label>
                <file>html/sf_fromworkspace.html</file>
                <callback>sf_fromworkspace</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Function Call Outputs</label>
            <demoitem>
                <label>Driving Function Call Subsystems and Charts from Stateflow Using Function Call Outputs</label>
                <file>html/sf_eventfcn.html</file>
                <callback>sf_eventfcn</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Driving Multiple Charts Using Function Call Outputs</label>
                <file>html/sf_multfuncout.html</file>
                <callback>sf_multfuncout</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Custom C-Code</label>
            <demoitem>
                <label>Including Custom C Code Functions and Structures</label>
                <file>html/sf_custom.html</file>
                <callback>sf_custom</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Including Custom C++ Code</label>
                <file>html/sf_cpp.html</file>
                <callback>sf_cpp</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Stateflow Bus Support</label>
            <demoitem>
                <label>Interface Simulink Bus Signals &amp; Integrate Custom C Code</label>
                <file>html/sfbus_demo.html</file>
                <callback>sfbus_demo</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Change Detection</label>
            <demoitem>
                <label>Change Detection</label>
                <file>html/sf_change_detection.html</file>
                <callback>sf_change_detection</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Change Detection for Matrices</label>
                <file>html/sf_change_detection_vector.html</file>
                <callback>sf_change_detection_vector</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Superstep</label>
            <demoitem>
                <label>Superstep</label>
                <file>html/sf_superstep.html</file>
                <callback>sf_superstep</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Superstep Cycle (Throw Error)</label>
                <file>html/sf_superstep_cycle_error.html</file>
                <callback>sf_superstep_cycle_error</callback>
                <type>model</type>
            </demoitem>
            <demoitem>
                <label>Superstep Cycle (Proceed)</label>
                <file>html/sf_superstep_cycle_proceed.html</file>
                <callback>sf_superstep_cycle_proceed</callback>
                <type>model</type>
            </demoitem>
        </demosection>
        <demosection>
            <label>Resolve Signal Object</label>
            <demoitem>
                <label>Resolve Signal Object</label>
                <file>html/sf_resolve_signal_object.html</file>
                <callback>sf_resolve_signal_object</callback>
                <type>model</type>
            </demoitem>
        </demosection>
    </demosection>
</demos>
