function A = eml_blas_xgeru(m,n,alpha1,x,ix0,incx,y,iy0,incy,A,ia0,lda)
%Embedded MATLAB Private Function

%   Level 2 BLAS xGERU(M,N,ALPHA,X(IX0),INCX,Y(IY0),INCY,A(IA0),LDA)

%   Copyright 2007-2009 The MathWorks, Inc.
%#eml
if m < 1 || n < 1
    return
end
if eml_use_refblas || ...
       ~(isa(x,class(A)) && isa(y,class(A)) && ...
        isreal(x) == isreal(A) && isreal(y) == isreal(A))
    A = eml_refblas_xgeru( ...
        cast(m,eml_blas_int), cast(n,eml_blas_int), ...
        alpha1+eml_scalar_eg(A), ...
        x, ix0, cast(incx,eml_blas_int), ...
        y, iy0, cast(incy,eml_blas_int), ...
        A, ia0, cast(lda,eml_blas_int));
else
    A = ceval_xgeru( ...
        cast(m,eml_blas_int), cast(n,eml_blas_int), ...
        alpha1+eml_scalar_eg(A), ...
        x, ix0, cast(incx,eml_blas_int), ...
        y, iy0, cast(incy,eml_blas_int), ...
        A, ia0, cast(lda,eml_blas_int));
end

%--------------------------------------------------------------------------

function A = ceval_xgeru(m,n,alpha1,x,ix0,incx,y,iy0,incy,A,ia0,lda)
eml_must_not_inline; % Helps limit creation of scalar temporaries.
% Select BLAS function.
if isreal(A)
    if isa(A,'single')
        fun = 'sger32';
    else
        fun = 'dger32';
    end
else
    if isa(A,'single')
        fun = 'cgeru32';
    else
        fun = 'zgeru32';
    end
end
% Call the BLAS function.
if eml_is_const(size(x)) && isempty(x) && ...
        eml_is_const(size(y)) && isempty(y)
    eml.ceval(fun,eml.rref(m),eml.rref(n), ...
        eml.rref(alpha1),eml.rref(A(ix0)),eml.rref(incx), ...
        eml.rref(A(iy0)),eml.rref(incy), ...
        eml.ref(A(ia0)),eml.rref(lda));
elseif eml_is_const(size(x)) && isempty(x)
    eml.ceval(fun,eml.rref(m),eml.rref(n), ...
        eml.rref(alpha1),eml.rref(A(ix0)),eml.rref(incx), ...
        eml.rref(y(iy0)),eml.rref(incy), ...
        eml.ref(A(ia0)),eml.rref(lda));
elseif eml_is_const(size(y)) && isempty(y)
    eml.ceval(fun,eml.rref(m),eml.rref(n), ...
        eml.rref(alpha1),eml.rref(x(ix0)),eml.rref(incx), ...
        eml.rref(A(iy0)),eml.rref(incy), ...
        eml.ref(A(ia0)),eml.rref(lda));
else
    eml.ceval(fun,eml.rref(m),eml.rref(n), ...
        eml.rref(alpha1),eml.rref(x(ix0)),eml.rref(incx), ...
        eml.rref(y(iy0)),eml.rref(incy), ...
        eml.ref(A(ia0)),eml.rref(lda));
end

%--------------------------------------------------------------------------
