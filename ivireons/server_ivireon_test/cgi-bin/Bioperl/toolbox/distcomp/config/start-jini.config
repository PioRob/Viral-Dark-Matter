import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.start.SharedActivatableServiceDescriptor;
import com.sun.jini.start.SharedActivationGroupDescriptor;
import com.mathworks.toolbox.distcomp.util.ConfigUtil;
import com.mathworks.toolbox.distcomp.control.PortConfig;

/* Copyright 2004-2005 The MathWorks, Inc. */

com.sun.jini.start {

    serviceType = "lookup";

    /* log, config, and jar directory definitions */
    /* The log dir does not depend on the job manager name */
    private static logPrefix = "${com.mathworks.toolbox.distcomp.checkpointdir}${/}${com.mathworks.toolbox.distcomp.hostname}";
    private static configDir = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}config${/}";
    private static jiniJarDir = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}..${/}..${/}java${/}jarext${/}distcomp${/}jini2${/}lib";
    private static distcompJar = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}..${/}..${/}java${/}jar${/}toolbox${/}distcomp.jar";

    act_sys_host = "${com.mathworks.toolbox.distcomp.hostname}";
    act_sys_port = PortConfig.getPhoenixPort("${com.mathworks.toolbox.distcomp.base_port}");

    persistenceDirectory = ConfigUtil.concat(new String[]{logPrefix, ConfigUtil.getServicePostfix(serviceType)});    
    checkpointDirectory = "${com.mathworks.toolbox.distcomp.checkpointdir}";
    logDirectory = "${com.mathworks.toolbox.distcomp.logdir}";
    jreFlags = ConfigUtil.getJVMStartupFlags("${com.mathworks.toolbox.distcomp.jreflags}");

    watchdogExportPortString = Integer.toString(PortConfig.getLookupExportPort("${com.mathworks.toolbox.distcomp.base_port}"));

    //
    // Shared Group Environment
    //
    private static sharedVM_policy = ConfigUtil.concat(new String[]{configDir,"jsk-all.policy"});
    private static sharedVM_classpath  = ConfigUtil.concat(new String[]{jiniJarDir,"${/}sharedvm.jar",java.io.File.pathSeparator,jiniJarDir,"${/}phoenix.jar",java.io.File.pathSeparator,jiniJarDir,"${/}reggie.jar",java.io.File.pathSeparator,distcompJar});
    sharedVM_log = ConfigUtil.concat(new String[]{logPrefix, ConfigUtil.getServiceSharedVMPostfix(serviceType)});
    
    private static sharedVM_command = null;
    private static sharedVM_options = ConfigUtil.concat(new String[] {"-Xrs"}, jreFlags);
    private static sharedVM_properties = new String[]{"com.mathworks.toolbox.distcomp.toolboxroot","${com.mathworks.toolbox.distcomp.toolboxroot}",
                          "com.mathworks.toolbox.distcomp.membergroups","${com.mathworks.toolbox.distcomp.membergroups}",
                          "com.mathworks.toolbox.distcomp.hostname","${com.mathworks.toolbox.distcomp.hostname}",
                          "com.mathworks.toolbox.distcomp.logdir","${com.mathworks.toolbox.distcomp.logdir}",
                          "com.mathworks.toolbox.distcomp.checkpointdir","${com.mathworks.toolbox.distcomp.checkpointdir}",
                          "com.mathworks.toolbox.distcomp.servicename","${com.mathworks.toolbox.distcomp.servicename}",
                          "com.mathworks.toolbox.distcomp.base_port","${com.mathworks.toolbox.distcomp.base_port}",
                          "com.mathworks.toolbox.distcomp.watchdogExportPort", watchdogExportPortString,
                          "com.mathworks.toolbox.distcomp.persistenceDir",persistenceDirectory,
                          "java.library.path", "${com.mathworks.toolbox.distcomp.library_path}",
                          "java.rmi.server.hostname","${com.mathworks.toolbox.distcomp.hostname}",
                          "java.rmi.server.useCodebaseOnly", "true",
                          "java.security.egd","file:/dev/urandom",
                          "java.security.policy","${java.security.policy}"};
                          
    private static sharedVM =
        new SharedActivationGroupDescriptor(
	    sharedVM_policy,
            sharedVM_classpath,
            sharedVM_log,
            sharedVM_command,
            sharedVM_options,
            sharedVM_properties,
            act_sys_host,
            act_sys_port);
	    
    //	   
    // Reggie (Lookup Service)
    //
    private static reggie_codebase = "";
    private static reggie_policy = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}config${/}jsk-all.policy";
    private static reggie_classpath = ConfigUtil.concat(new String[]{jiniJarDir,"${/}reggie.jar",java.io.File.pathSeparator,jiniJarDir,"${/}phoenix.jar"});
    private static reggie_config = ConfigUtil.concat(new String[]{configDir,"reggie.config"});
    private static reggie_impl = "com.sun.jini.reggie.PersistentRegistrarImpl";
    private static reggie_service = 
        new SharedActivatableServiceDescriptor(
            reggie_codebase, reggie_policy, reggie_classpath, 
	    reggie_impl, sharedVM_log, new String[] { reggie_config },
	    true, act_sys_host, act_sys_port);

    //
    // Parent watchdog service
    // 
    private static watchdog_codebase = "";
    private static watchdog_policy = ConfigUtil.concat(new String[]{configDir,"jsk-all.policy"});
    private static watchdog_classpath = ""; 
    private static watchdog_impl = "com.mathworks.toolbox.distcomp.control.ParentWatchdog";
    private static watchdog_args = null;

    private static watchdog_service = 
        new SharedActivatableServiceDescriptor(
            watchdog_codebase,
            watchdog_policy,
            watchdog_classpath,
            watchdog_impl,
            sharedVM_log,
            watchdog_args,
            true,
            act_sys_host, 
            act_sys_port);

    //
    // Services to start -- used by ServiceStarter.main()
    //
    static serviceDescriptors = new ServiceDescriptor[] {
        sharedVM,
        reggie_service,
        watchdog_service
    };
    
    
    //
    // Shared Group 
    //
    private static shared_group_codebase = "";
    private static shared_group_policy = ConfigUtil.concat(new String[]{configDir,"jsk-all.policy"});
    private static shared_group_classpath = ConfigUtil.concat(new String[]{jiniJarDir,"${/}group.jar"});
    private static shared_group_config = ConfigUtil.concat(new String[]{configDir,"group.config"});
    private static shared_group_impl = "com.sun.jini.start.SharedGroupImpl";
    private static shared_group_service =
        new SharedActivatableServiceDescriptor(
	    shared_group_codebase,
            shared_group_policy,
            shared_group_classpath,
            shared_group_impl,
            sharedVM_log, // Same as above
            new String[] { shared_group_config },
            false,
            act_sys_host,
            act_sys_port);
    
    //
    // Groups to destroy -- used by DestroySharedGroup.main()
    //	    	    
    static serviceDestructors =
        new ServiceDescriptor[] { shared_group_service };
}

