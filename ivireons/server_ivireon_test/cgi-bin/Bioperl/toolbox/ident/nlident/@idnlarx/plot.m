function plot(varargin)
%PLOT plots the nonlinearity of the Nonlinear ARX (IDNLARX) models.
%
% PLOT creates a plot window where the shape of the nonlinearity of
% the model can be explored as a function of its input regressors.
%
%   PLOT(MODEL) shows the nonlinearity plot for all outputs of the model.
%
%   PLOT(M1,M2,M3,..) shows plots for multiple models M1, M2, M3,...
%
%   PLOT(M1,Col1, M2,Col2,...) allows specification of colors to use for
%   each model. The colors must either be a valid plot color string:
%   ('b','y','m','c','r','g','w'), or a 3-element double vector of RGB
%   values. Colors need not be specified for all models.
%
%   PLOT(M1,S1, M2,S2, M3,S3,...,'NumberOfSamples',N) allows specification
%   of number of samples to use to grid the regressor space. N points are
%   used on each regressor axis.
%
%   A model's nonlinearity (NL = MODEL.NONLINEARITY) is a nonlinearity
%   estimator function such as wavenet, sigmoidnet, treepartition etc.
%   The nonlinearity estimator function has model regressors (see GETREG)
%   as its inputs. The value of the nonlinearity may be viewed by
%   projecting its response in 2 or 3 dimensional space. To do this, one
%   (2D) or two (3D) regressors are chosen as axes while a center point
%   (cross section location) is specified for the other regressors. The
%   response data may be generated by using function idnlfun/evaluate.
%
%   The collapsible configuration panel on the right hand side of the plot
%   window allows choosing the regressors to use on the plot axes and
%   specification of center points for the other regressors. The range of
%   values to use for chosen regressors may also be specified as a vector
%   of two entries ([min,max] values for range). For multi-output models,
%   there are separate plots for each output. The output to view is
%   selected from the pop up menu located at the top of the figure.
%
%   See also idnlarx/getreg, idnlhw/plot, idnlfun/evaluate, idnlmodel/step.

% Copyright 2006-2008 The MathWorks, Inc.
% $Revision: 1.1.8.8 $ $Date: 2008/12/29 02:08:05 $

v = varargin;

% number of samples
indN = find(cellfun(@(x)strncmpi(x,'numberofsamples',length(x)),v));
N = 20;
if ~isempty(indN)
    if numel(indN)>1
        ctrlMsgUtils.error('Ident:general:multipleSpecForOpt','NumberOfSamples','plot')
    end
    if (nargin==indN) || ~isposintscalar(v{indN+1})
        ctrlMsgUtils.error('Ident:general:PosIntOptionValue','NumberOfSamples','plot','idnlarx/plot')
    end
    N = v{indN+1};
    
    % remove indices for PVpair from v
    v(indN:indN+1) = [];
end

% Models
ind = 0;
dataobj = handle([]);
for k = 1:length(v)
    if isa(v{k},'idnlarx')
        ind = ind+1;
        Col = [];
        m = v{k};
        if ~isestimated(m)
            wname = inputname(k);
            if isempty(wname)
                wname = ['no. ',int2str(k)];
            else
                wname = ['''',wname,''''];
            end
            ctrlMsgUtils.warning('Ident:utility:nonEstimatedModel2',wname,'plot')
            continue;
        end
        if ~isempty(get(m,'Name'))
            modelname = get(m,'Name');
        else
            modelname = inputname(k);
        end
        if isempty(modelname)
            modelname = ['untitled',int2str(ind)];
        end
        % check color string
        if k<length(v) && (ischar(v{k+1}) || isrealvec(v{k+1}))
            [isCol,Col] = localIsAColor(v{k+1});
            if ~isCol
                ctrlMsgUtils.error('Ident:plots:idnlarxInvalidColorSpec',...
                    '''b'',''y'',''m'',''c'',''r'',''g'',''w'',''k''')
            end
        end
        dataobj(ind) = plotpack.nlarxdata(m,modelname);
        dataobj(ind).Color = Col;
    end
end

if isempty(dataobj)
    ctrlMsgUtils.error('Ident:plots:noValidModels','IDNLARX')
end

plotobj = plotpack.idnlarxplot(dataobj,N,false);

% set initial plot
plotobj.showPlot;

set(plotobj.Figure,'vis','on','ResizeFcn',@(es,ed)plotobj.executeResizeFcn,...
    'HandleVisibility','callback');
set(plotobj.Figure,'userdata',plotobj);

%--------------------------------------------------------------------------
function [boo,Col] = localIsAColor(v)
% determine if input v is a valid color argument

Col = [];
boo = (ischar(v) && any(strcmpi(v,{'b','y','m','c','r','g','w','k'}))) ||...
    (isrealvec(v) && numel(v)==3 && all(v>=0) && all(v<=1));

if boo
    if ischar(v)
        Col = idutils.char2rgb(v);
    else
        Col = v;
    end
end
