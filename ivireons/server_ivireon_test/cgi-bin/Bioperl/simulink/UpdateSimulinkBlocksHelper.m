function UpdateSimulinkBlocksHelper(h)
% Function updateSimulinkBlocksHelper is a helper function to be called as part of slupdate.
% it is not intended to be called directly from the command line.

%   Copyright 1990-2010 The MathWorks, Inc.
%   $Revision: 1.1.6.14.2.1 $ $Date: 2010/07/06 14:42:08 $

if h.CheckFlags.BlockReplace
    ReplaceInfo = getReplaceInfo();
    replaceBlocks(h, ReplaceInfo);
    
    % The following code is to handle Rtwt target updates.
    % It is here until a package is created to hold all the updateHelper
    % functions.
    context = getContext(h);

    sys = context;    
    while strcmp(get_param(sys, 'Type'), 'block')
        sys = get_param(sys, 'parent');
    end

    switch(lower(get_param(sys, 'RTWSystemTargetFile')))
      case {'win_tgt.tlc', 'rtwin.tlc'}  % Change for RTWin
        name = get_param(sys, 'name');
        funcSetA = uSafeSetParam(h, sys, 'RTWSystemTargetFile','rtwin.tlc');
        funcSetB = uSafeSetParam(h, sys, 'RTWTemplateMakefile','rtwintmf');
        appendTransaction(h, name, h.MiscUpdateReasonStr, {funcSetA, funcSetB});
    end

    % Update configuration sets
    % (e.g., synchronize the configset with changes to system target file).
    try
        updateConfigSets(h);
    catch e
        DAStudio.warning('Simulink:utility:UnableToUpdateCS', e.message);
    end
    
     %any other action needed to update the model for this product in a
     %non-compiled state
end
   
if h.CheckFlags.Compiled
    ReplaceInfo = getCompiledReplaceInfo();
    replaceBlocks(h, ReplaceInfo);
end

end

function ReplaceInfo = getReplaceInfo

portZeroPad = zeros(1, length(get_param('built-in/Subsystem','Ports')) - 2);
dot_linked_lib = sprintf('simulink_need_slupdate/Dot\nProduct');

% collect other product entries to top for deletion.
ReplaceInfo = { ...
 { 'BlockType', 'Reference', ...
   'SourceBlock', sprintf('simulink_obsolete/Matrix\nConcatenation')}, ...
   'ReplaceSFcnMatrixConcatenation';...
 { 'BlockType', 'Reference', ...
   'SourceBlock', 'simulink_obsolete/Reshape'}, ...
   'ReplaceSFcnReshape';...
 { 'MaskType',sprintf('Weighted Moving Average'), ...
   'ReferenceBlock', sprintf('simulink_need_slupdate/Weighted\nMoving Average')}, ...
   'ReplaceSFcnWeightedMovingAverage';...
 { 'MaskType', '3 DOF equations of motion'}, 'Replace3DOF';...
 { 'MaskType','PID(2) Controller'}, 'ReplacePIDApproxDerivWithPID1dof';...
 { 'MaskType','PID Controller'}, 'ReplacePIDIdealDerivWithPID1dof';...
 { 'BlockType', 'Reference', 'SourceBlock','rtwinlib/Adapter' }, 'delete_block';...
 { 'BlockType', 'Reference', 'SourceBlock','rtwinlib/RT In' }, 'ReplaceRTWinInOut';...
 { 'BlockType', 'Reference', 'SourceBlock','rtwinlib/RT Out' }, 'ReplaceRTWinInOut';...
 ...
 { 'MaskType','Dot Product','referenceBlock',dot_linked_lib},'ReplaceDotProduct';...
 { 'MaskType','Pulse Generator', ...
   'MaskPromptString',['Pulse period (secs):|Pulse width:|Pulse height:|'...
                        'Pulse start time:'] }, 'ReplacePulseGen';...
 { 'MaskType', 'Pulse Generator', ...
   'LinkStatus', 'none', ...
   'MaskPromptString','Period (secs):|Duty cycle (% of period):|Amplitude:|Start time:'}, ...
 'ReplacePulseGen2';...
 { 'MaskType','Crossing' }, 'ReplaceHitCross';...
 { 'BlockType','S-Function','FunctionName','sfunmem' }, 'ReplaceSFunMem';...
 { 'BlockType','S-Function','FunctionName','quantize','Mask','on'}, 'ReplaceQuantizer';...
 { 'MaskType','Graph scope.', ...
   'MaskPromptString',['Time range:|y-min:|y-max:|', ...
   'Line type (rgbw-:*). Separate each plot by ''/'':'] },'ReplaceGraphScope';...
 { 'MaskType','2-D Table Lookup' }, 'Replace2DTableLookup';...
 { 'MaskType','LookupIdxSearch' }, 'ReplaceSfunPrelookup';...
 { 'MaskType','LookupNDInterpIdx' }, 'ReplaceSfunInterpND';...
 { 'MaskType','Lookup Table (2-D)' }, 'Replace2DTableLookup';...
 { 'MaskType','Limited integrator.' }, 'ReplaceLimitedIntegrator';...
 { 'MaskType','Limited Integrator.' }, 'ReplaceLimitedIntegrator';...
 { 'BlockType','ResetIntegrator' }, 'ReplaceResetIntegrator';...
 { 'BlockType','Integrator' }, 'ReplaceContinuousIntegrator';...
 { 'BlockType','ToWorkspace'}, 'UpdateToWorkspace';...
 { 'BlockType','ElementaryMath'}, 'ReplaceElMath';...
 { 'BlockType', 'Outport', 'OutputWhenDisabled', 'held' }, 'FixOutportIC';...
 { 'BlockType', 'From', 'CloseFcn', 'tagdialog Close'}, ...
    'ReplaceCloseFcnWithEmptyStr';...
 { 'MaskType', 'Matrix Gain','LinkStatus','none'}, 'ReplaceMatrixGain';...
 { 'MaskType', 'Coulombic and Viscous Friction','LinkStatus','none'}, 'ReplaceCoulombic';...
 { 'MaskType', 'XY scope.','LinkStatus','none'}, 'ReplaceXYScope';...
 { 'MaskType', 'chirp','LinkStatus','none'}, 'ReplaceChirp';...
 { 'MaskType', ' Ramp','LinkStatus','none'}, 'ReplaceRamp';...
 { 'MaskType', 'Repeating table','LinkStatus','none'}, 'ReplaceRepeatingSequence';...
 { 'MaskType','PID Controller','LinkStatus','none'}, 'ReplacePID';...
 { 'MaskType','PID(2) Controller','LinkStatus','none'}, 'ReplacePID2';...
 { 'MaskType','Latch','LinkStatus','none'}, 'ReplaceFlipFlop';...
 { 'MaskType','SR flip-flop','LinkStatus','none'}, 'ReplaceFlipFlop';...
 { 'MaskType','JK flip-flop','LinkStatus','none'}, 'ReplaceFlipFlop';...
 { 'MaskType','D flip-flop','LinkStatus','none'},'ReplaceFlipFlop';...    
 { 'BlockType', 'SubSystem','ports',[2 2 portZeroPad],'Mask','off','LinkStatus','none'}, 'ReplaceLatchWithRef';...
 { 'BlockType', 'SubSystem','ports',[3 2 portZeroPad],'Mask','off','LinkStatus','none'}, 'ReplaceLatchWithRef';...
 ...
 { 'MaskType', 'First Order Hold','LinkStatus','none','MaskPromptString','Sample time:'}, 'replaceBlockWithLink';...
 { 'MaskType','Discrete Transfer Function with Initial Outputs','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Discrete Transfer Function with Initial States','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Discrete Zero-Pole with Initial Outputs','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Discrete Zero-Pole with Initial States','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','State-Space with Initial Outputs','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Transfer Function with Initial Outputs','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Transfer Function with Initial States','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Zero-Pole with Initial Outputs','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Zero-Pole with Initial States','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Auto Correlator','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Spectrum Analyzer','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Cross Correlator','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Digital clock','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Derivative for linearization','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Delay for linearization.','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Cart2Polar','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Cart2Sph','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','CelsiusToFahrenheit','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','DegreesToRadians','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','FahrenheitToCelsius','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Polar2Cart','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','RadiansToDegrees','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Sph2Cart','LinkStatus','none'}, 'replaceBlockWithLink';...
 { 'MaskType','Sign','LinkStatus','none'},'replaceBlockWithLink';...
 ... 
 { 'MaskType', 'Direction Cosine Matrix' }, 'ReplaceDCM';...  
 { 'MaskDescription', 'Embedded MATLAB block' }, 'UpdateEMLFimath';...
 { 'MaskDescription', 'Truth Table Block' }, 'UpdateSFTruthTableFimath';...
 { 'BlockType', 'Math','Operator','1/sqrt' }, 'ReplaceRSqrt';...
 ...
 { 'MaskType', 'DocBlock' }, 'CompressRTFDocBlock';...
 { 'BlockType', 'ModelReference', 'ProtectedModel', 'on' }, 'HandleProtectedModels'; ...
 { 'SearchDepth', 1, 'BlockType', 'Inport' }, sl('getFcnHandle', 'SetBlockForArraysOfBuses'); ...
 { 'SearchDepth', 1, 'BlockType', 'Outport' }, sl('getFcnHandle', 'SetBlockForArraysOfBuses') ...
};

ReplaceInfo = cell2struct(ReplaceInfo, { 'BlockDesc', 'ReplaceFcn'}, 2);

end

function ReplaceInfo = getCompiledReplaceInfo
% Totally three functions are needed
% first function: register the compile check
% second function: get the compiled data
% third function: post compile action such as replace the block, give
% warnings...

ReplaceInfo = { ...
    {'RegExp', 'Off','FollowLinks', 'off','LookUnderMasks', 'all','Type', 'block','BlockType','Lookup'}, 'Lookup1D2DRegisterCompileCheck'; ...
    {'RegExp', 'Off','FollowLinks', 'off','LookUnderMasks', 'all','Type', 'block','BlockType','Lookup2D'}, 'Lookup1D2DRegisterCompileCheck'; ...
    {'RegExp',  'on','FollowLinks', 'off','LookUnderMasks', 'all','Type', 'block','BlockType','MultiPortSwitch', 'DataPortOrder', '^Z|^O'}, 'MPSwitchRegisterCompileCheck'; ...
    {'RegExp', 'Off','FollowLinks', 'off','LookUnderMasks', 'all','Type', 'block','BlockType','Math','Operator','sqrt' }, 'MathRegisterCompileCheck'...
    };

ReplaceInfo = cell2struct(ReplaceInfo, { 'BlockDesc', 'ReplaceFcn'}, 2);
end

function updateConfigSets(h)
%UPDATECONFIGSETS  Report on all configsets that need to be updated.
   
    mdl = bdroot(getContext(h));

    if (strcmp(get_param(mdl, 'BlockDiagramType'), 'model') && ...
        license('test', 'Real-Time_Workshop'))

        % Initialize variables
        csToUpdate = '';
        funcSet = {};
        
        % Loop through configsets in the model
        csNames = getConfigSets(mdl);
        for idx = 1:length(csNames)
            csName = csNames{idx};
            wsVarName = '';
            cs = getConfigSet(mdl, csName);
            if isa(cs, 'Simulink.ConfigSetRef')
                try
                    wsVarName = cs.WSVarName;
                    cs  = cs.getRefConfigSet;
                catch
                    % Skip this configset - no valid reference configset found
                    continue;
                end
            end
            
            outOfDate = updateCS(cs, 'CheckIfAnythingOutOfDate');
            
            if outOfDate
                % Record transactions for reporting purposes
                funcSet{end+1,1} = {'updateCS', cs, false};
                csToUpdate = [csToUpdate, sprintf(', '), csName];
        
                % Do update if required
                if doUpdate(h)
                    updateCS(cs, 'UpdateIfAnythingOutOfDate');
                    if ~isempty(wsVarName)
                        DAStudio.warning('Simulink:utility:ConfigSetRefUpdatingSourceConfigSet', ...
                                         wsVarName);
                    end                
                end
            end
        end
        
        if ~isempty(csToUpdate)
            csToUpdate = csToUpdate(3:end);  % Remove leading ', '
            msgTxt = DAStudio.message('Simulink:utility:slupdateConfigSetsToBeUpdated', csToUpdate);
            appendTransaction(h, mdl, msgTxt, funcSet);
        end
    end
end

%[EOF] UpdateSimulinkBlocks
