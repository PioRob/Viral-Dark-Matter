import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.start.SharedActivatableServiceDescriptor;
import com.sun.jini.start.SharedActivationGroupDescriptor;
import com.mathworks.toolbox.distcomp.util.ConfigUtil;
import com.mathworks.toolbox.distcomp.control.PortConfig;

/* Copyright 2004-2010 The MathWorks, Inc. */

com.sun.jini.start {
    serviceType = "worker";

    /* log, config, and jar directory definitions */
    private static logPrefix = "${com.mathworks.toolbox.distcomp.checkpointdir}${/}${com.mathworks.toolbox.distcomp.hostname}_${com.mathworks.toolbox.distcomp.servicename}";
    private static configDir = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}config${/}";

    private static jarDir            = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}..${/}..${/}java${/}jar";
    private static jarextDir         = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}..${/}..${/}java${/}jarext";
    private static toolboxJarDir     = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}..${/}..${/}java${/}jar${/}toolbox";
    private static jiniJarDir        = "${com.mathworks.toolbox.distcomp.toolboxroot}${/}..${/}..${/}java${/}jarext${/}distcomp${/}jini2${/}lib";

    act_sys_host = "${com.mathworks.toolbox.distcomp.hostname}";
    act_sys_port = PortConfig.getPhoenixPort("${com.mathworks.toolbox.distcomp.base_port}");
    
    persistenceDirectory = ConfigUtil.concat(logPrefix, ConfigUtil.getServicePostfix(serviceType));
    checkpointDirectory  = "${com.mathworks.toolbox.distcomp.checkpointdir}";
    logDirectory         = "${com.mathworks.toolbox.distcomp.logdir}";  

    //
    // Shared Group Environment
    //
    // All workers in the group share the same classpath to ensure out 
    // native code is loaded by same classloader.
    private static sharedVM_classpath = ConfigUtil.path(new String[]{
            ConfigUtil.fullfile(jiniJarDir,    "sharedvm.jar"),
            ConfigUtil.fullfile(jiniJarDir,    "phoenix.jar"),
            ConfigUtil.fullfile(jiniJarDir,    "reggie.jar"),
            ConfigUtil.fullfile(jiniJarDir,    "destroy.jar"),
            ConfigUtil.fullfile(jiniJarDir,    "jini-ext.jar"),
            ConfigUtil.fullfile(jarextDir,     "commons-io.jar"),
            ConfigUtil.fullfile(toolboxJarDir, "distcomp.jar"),  // Needed for MatlabMCR
            ConfigUtil.fullfile(jarDir,        "jmi.jar"),       // Needed for MatlabMCR
            ConfigUtil.fullfile(jarDir,        "services.jar"),  // Needed for MatlabMCR
            ConfigUtil.fullfile(jarDir,        "util.jar")       // Needed for PlatformInfo
        });   


    private sharedVM_policy = ConfigUtil.fullfile(configDir,"jsk-all.policy");

    // Must NOT be private
    sharedVM_log = ConfigUtil.concat(logPrefix, ConfigUtil.getServiceSharedVMPostfix(serviceType));

    private static sharedVM_command = null;

    private static jvmStartupFlags = ConfigUtil.concat(
                ConfigUtil.getJVMStartupFlags("${com.mathworks.toolbox.distcomp.jreflags}"),
                ConfigUtil.getJVMDebugProperties("NO_DEBUGGING") // change this to a valid port to enable debugging
            );

    // -Xrs: Reduces usage of operating-system signals by the Java virtual machine (JVM)
    private static extraJVMFlags = new String[]{"-Xrs"};

    private static sharedVM_options = ConfigUtil.concat(jvmStartupFlags, extraJVMFlags);

    private static sharedVM_properties = new String[]{
             "java.security.manager",               "com.mathworks.toolbox.distcomp.util.AllowAllSecurityManager",                              
             "java.library.path",                   "${com.mathworks.toolbox.distcomp.library_path}",
             "java.security.egd",                   "file:/dev/urandom",
             "java.rmi.server.useCodebaseOnly",     "true",                          
             "sun.net.inetaddr.ttl",                "${com.mathworks.toolbox.distcomp.DNS_lookupInterval}",
             "sun.rmi.transport.connectionTimeout", "${com.mathworks.toolbox.distcomp.RMI_connectionTimeout}",
             "sun.rmi.transport.tcp.readTimeout",   "${com.mathworks.toolbox.distcomp.RMI_readTimeout}",
             "sun.rmi.dgc.client.gcInterval",       "${com.mathworks.toolbox.distcomp.jobmanager_gcInterval}"};
                          
    private static sharedVM =
       new SharedActivationGroupDescriptor(
    	    sharedVM_policy,
            sharedVM_classpath,
            sharedVM_log,
            sharedVM_command,
            sharedVM_options,
            sharedVM_properties,
            act_sys_host,
            act_sys_port);

    //
    // MatlabWorker
    //

    // MATLAB stdout and stderr streams are written to this file. 
    private static matlabOutputFile = ConfigUtil.concat(new String[]{
                                                    "${com.mathworks.toolbox.distcomp.logdir}${/}",
                                                    "worker-matlab-output_",
                                                    "${com.mathworks.toolbox.distcomp.hostname}_",
                                                    "${com.mathworks.toolbox.distcomp.servicename}_",
                                                    ConfigUtil.getTimeStamp(),
                                                    ".log"});

    private static mlworker_codebase = "";
    private static mlworker_policy = ConfigUtil.fullfile(configDir,"jsk-all.policy");
    private static mlworker_classpath = "";
    private static mlworker_impl = "com.mathworks.toolbox.distcomp.worker.WorkerImpl";
    private static mlworker_config = ConfigUtil.fullfile(configDir,"mlworker.config");
    private static mlworker_service = 
        new SharedActivatableServiceDescriptor(
            mlworker_codebase, 
            mlworker_policy,
            mlworker_classpath,
            mlworker_impl, 
            sharedVM_log,
            new String[]{ 
                        mlworker_config,  
                        "com.mathworks.toolbox.distcomp.servicename",                    "${com.mathworks.toolbox.distcomp.servicename}",
                        "com.mathworks.toolbox.distcomp.jobmanagername",                 "${com.mathworks.toolbox.distcomp.jobmanagername}",
                        "com.mathworks.toolbox.distcomp.membergroups",                   "${com.mathworks.toolbox.distcomp.membergroups}",
                        "com.mathworks.toolbox.distcomp.logdir",                         "${com.mathworks.toolbox.distcomp.logdir}",
                        "com.mathworks.toolbox.distcomp.checkpointdir",                  "${com.mathworks.toolbox.distcomp.checkpointdir}",
                        "com.mathworks.toolbox.distcomp.persistenceDir",                 persistenceDirectory,
                        "com.mathworks.toolbox.distcomp.base_port",                      "${com.mathworks.toolbox.distcomp.base_port}",
                        "com.mathworks.toolbox.distcomp.lookup_hosts",                   "${com.mathworks.toolbox.distcomp.lookup_hosts}",
                        "com.mathworks.toolbox.distcomp.clean_checkpoint_info",          "${com.mathworks.toolbox.distcomp.clean_checkpoint_info}",
                        "com.mathworks.toolbox.distcomp.toolboxroot",                    "${com.mathworks.toolbox.distcomp.toolboxroot}",
                        "com.mathworks.toolbox.distcomp.loglevel",                       "${com.mathworks.toolbox.distcomp.loglevel}",
                        "com.mathworks.toolbox.distcomp.matlabexecutable",               "${com.mathworks.toolbox.distcomp.matlabexecutable}",
                        "com.mathworks.toolbox.distcomp.matlabOutputFile",               matlabOutputFile,
                        "com.mathworks.toolbox.distcomp.workerstarttimeout",             "${com.mathworks.toolbox.distcomp.workerstarttimeout}",
                        "com.mathworks.toolbox.distcomp.securityLevel",                  "${com.mathworks.toolbox.distcomp.securityLevel}",
                        "com.mathworks.toolbox.distcomp.securityDir",                    "${com.mathworks.toolbox.distcomp.securityDir}",
                        "com.mathworks.toolbox.distcomp.worker.windowsDomain",           "${com.mathworks.toolbox.distcomp.worker.windowsDomain}",
                        "com.mathworks.toolbox.distcomp.rmi.useSecureCommunication",     "${com.mathworks.toolbox.distcomp.rmi.useSecureCommunication}",
                        "com.mathworks.toolbox.distcomp.rmi.secureDataTransfer",         "true",
                        "com.mathworks.toolbox.distcomp.rmi.keystorePath",               "${com.mathworks.toolbox.distcomp.rmi.keystorePath}",
                        "com.mathworks.toolbox.distcomp.rmi.defaultKeystorePath",        "${com.mathworks.toolbox.distcomp.rmi.defaultKeystorePath}", 
                        "com.mathworks.toolbox.distcomp.rmi.keystorePassword",           "${com.mathworks.toolbox.distcomp.rmi.keystorePassword}",
                        "com.mathworks.toolbox.distcomp.rmi.useServerSpecifiedHostname", "true",
                        "com.mathworks.toolbox.distcomp.hostname",                       "${com.mathworks.toolbox.distcomp.hostname}",
                        "java.rmi.server.hostname",                                      "${com.mathworks.toolbox.distcomp.hostname}"
                        },
            true, 
            act_sys_host, 
            act_sys_port);

    //
    // Services to start -- used by ServiceStarter.main()
    //
    static serviceDescriptors = new ServiceDescriptor[] {
        sharedVM,
        mlworker_service
    };
        
    //
    // Shared Group 
    //
    private static shared_group_codebase = "";
    private static shared_group_policy    = ConfigUtil.fullfile(configDir,"jsk-all.policy");
    private static shared_group_classpath = ConfigUtil.fullfile(jiniJarDir, "group.jar");
    private static shared_group_config    = ConfigUtil.fullfile(configDir, "group.config");
    private static shared_group_impl = "com.sun.jini.start.SharedGroupImpl";
    private static shared_group_service =
        new SharedActivatableServiceDescriptor(
            shared_group_codebase,
            shared_group_policy,
            shared_group_classpath,
            shared_group_impl,
            sharedVM_log, // Same as above
            new String[] { shared_group_config },
            false,
            act_sys_host,
            act_sys_port);
    
    //
    // Groups to destroy -- used by DestroySharedGroup.main()
    //	    	    
    static serviceDestructors =
        new ServiceDescriptor[] { shared_group_service };
}

