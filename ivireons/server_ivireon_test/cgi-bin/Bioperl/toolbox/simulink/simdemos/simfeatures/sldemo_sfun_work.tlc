%% File : sldemo_sfun_work.tlc
%%
%% Description: 
%%   Real-Time Workshop TLC Code Generation file for sldemo_sfun_work
%%
%% Simulink version      : 7.6 (R2010b) 28-Jun-2010
%% TLC file generated on : 30-Jun-2010 04:12:00

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'sldemo_sfun_work';
     def.InitializeConditionsFcnSpec = 'void memory_bus_init(COUNTERBUS work1[1], int32 p1, int32 p2)';
     def.OutputFcnSpec = 'void memory_bus_step(COUNTERBUS u1[1], COUNTERBUS work1[1], COUNTERBUS y1[1])';
     def.HeaderFiles = {'memory_bus.h'};
     def.SourceFiles = {'memory_bus.c'};
     def.IncPaths = {'sldemo_lct_src'};
     def.SrcPaths = {'sldemo_lct_src'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements sldemo_sfun_work "C"

%% Function: FcnGenerateUniqueFileName ====================================
%%
%function FcnGenerateUniqueFileName(filename, type) void
  %%
  %assign isReserved = TLC_FALSE
  %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
    %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
    %if (thisFile.Name==filename) && (thisFile.Type==type)
      %assign isReserved = TLC_TRUE
      %break
    %endif
  %endforeach
  %if (isReserved==TLC_TRUE)
    %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
  %endif
  %return filename
  %%
%endfunction

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %assign ver = FEVAL("ver", "simulink")
  %assign factor = 1.0
  %assign slVer = 0.0
  %foreach idx = SIZE(ver.Version)[1]
    %if ISEQUAL(ver.Version[idx], ".")
      %assign factor = factor/10.0
    %else
      %assign slVer = slVer + %<ver.Version[idx]>*factor
    %endif
  %endforeach

  %if GenerateErtSFunction==1 && slVer < 6.21
    %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
  %endif

  %if ExtMode==1 && slVer < 6.3
    %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
  %endif

  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"

    %if slVer < 6.21
      %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
    %endif

    %assign hFileName = FcnGenerateUniqueFileName("sldemo_sfun_work_wrapper", "header")
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #include "tmwtypes.h"

    extern void sldemo_sfun_work_wrapper_initialize_conditions(  void *work1, void *__work1BUS, const int32_T p1, const int32_T p2);

    extern void sldemo_sfun_work_wrapper_output( const void *u1, void *__u1BUS,  void *work1, void *__work1BUS,  void *y1, void *__y1BUS);

    #endif
    %closefile hFile

    %assign cFileName = FcnGenerateUniqueFileName("sldemo_sfun_work_wrapper", "source")
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #include "tmwtypes.h"
    #include "memory_bus.h"
    #include "counterbus.h"

    void sldemo_sfun_work_wrapper_initialize_conditions(  void *work1, void *__work1BUS, const int32_T p1, const int32_T p2) {

      /*
       * Assign the Simulink Structure work1 to Legacy Structure __work1BUS
       */
      %assign dTypeId = LibBlockDWorkDataTypeId(work1)
      %<SLibAssignSLStructToUserStruct(dTypeId, "(*(COUNTERBUS *)__work1BUS)", "(char *)work1", 0)>


      memory_bus_init( (COUNTERBUS *) __work1BUS, (int32_T)(p1), (int32_T)(p2));

      /*
       * Assign the Legacy Structure __work1BUS to the Simulink Structure work1
       */
      %assign dTypeId = LibBlockDWorkDataTypeId(work1)
      %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(COUNTERBUS *)__work1BUS)", 0)>

    }

    void sldemo_sfun_work_wrapper_output( const void *u1, void *__u1BUS,  void *work1, void *__work1BUS,  void *y1, void *__y1BUS) {

      /*
       * Assign the Simulink Structure u1 to Legacy Structure __u1BUS
       */
      %assign dTypeId = LibBlockInputSignalDataTypeId(0)
      %<SLibAssignSLStructToUserStruct(dTypeId, "(*(COUNTERBUS *)__u1BUS)", "(char *)u1", 0)>

      /*
       * Assign the Simulink Structure work1 to Legacy Structure __work1BUS
       */
      %assign dTypeId = LibBlockDWorkDataTypeId(work1)
      %<SLibAssignSLStructToUserStruct(dTypeId, "(*(COUNTERBUS *)__work1BUS)", "(char *)work1", 0)>


      memory_bus_step( (COUNTERBUS *) __u1BUS, (COUNTERBUS *) __work1BUS, (COUNTERBUS *) __y1BUS);

      /*
       * Assign the Legacy Structure __y1BUS to the Simulink Structure y1
       */
      %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
      %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(COUNTERBUS *)__y1BUS)", 0)>

      /*
       * Assign the Legacy Structure __work1BUS to the Simulink Structure work1
       */
      %assign dTypeId = LibBlockDWorkDataTypeId(work1)
      %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(COUNTERBUS *)__work1BUS)", 0)>

    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else

    %<LibAddToCommonIncludes("memory_bus.h")>
    %<LibAddToCommonIncludes("counterbus.h")>

  %endif

    %<SLibAddToStaticSources("memory_bus.c")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"
  %else
    %<LibBlockSetIsExpressionCompliant(block)>
  %endif
  %%
%endfunction

%% Function: InitializeConditions  ========================================
%%
%function InitializeConditions (block, system) Output
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"
    %assign p1_val = LibBlockParameter(p1, "", "", 0)
    %assign p2_val = LibBlockParameter(p2, "", "", 0)
    %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
    %assign work1BUS_ptr = LibBlockDWorkAddr(work1BUS, "", "", 0)
    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    sldemo_sfun_work_wrapper_initialize_conditions( %<work1_ptr>, %<work1BUS_ptr>, %<p1_val>, %<p2_val>);
  %else 
   %assign p1_val = LibBlockParameter(p1, "", "", 0)
   %assign p2_val = LibBlockParameter(p2, "", "", 0)
   %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
   %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
   memory_bus_init( %<work1_ptr>, (int32_T)%<p1_val>, (int32_T)%<p2_val>);
  %endif 
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"
    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u1BUS_ptr = LibBlockDWorkAddr(u1BUS, "", "", 0)
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y1BUS_ptr = LibBlockDWorkAddr(y1BUS, "", "", 0)
    %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
    %assign work1BUS_ptr = LibBlockDWorkAddr(work1BUS, "", "", 0)
    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    sldemo_sfun_work_wrapper_output( %<u1_ptr>, %<u1BUS_ptr>, %<work1_ptr>, %<work1BUS_ptr>, %<y1_ptr>, %<y1BUS_ptr>);
  %else 
    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
    %%
    memory_bus_step( (COUNTERBUS*)%<u1_ptr>, %<work1_ptr>, %<y1_ptr>);
  %endif 
  %%
%endfunction

%% [EOF]
