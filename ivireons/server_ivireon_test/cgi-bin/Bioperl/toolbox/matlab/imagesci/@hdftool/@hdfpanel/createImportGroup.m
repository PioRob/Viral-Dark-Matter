function [hImportGroup handles] = createImportGroup(this, hMainPanel)
%CREATEIMPORTGROUP Create the group of widgets used for importing data.
%
%   Function arguments
%   ------------------
%   THIS: the hdfPanel object instance.
%   HMAINPANEL: Our HG parent.

%   Copyright 2005-2009 The MathWorks, Inc.
%   $Revision: 1.1.6.9 $  $Date: 2010/01/19 02:55:40 $

    colorPrefs = this.fileTree.fileFrame.prefs.colorPrefs;

    hImportGroup = uipanel('parent',hMainPanel);
    prefs = this.fileTree.fileFrame.prefs;

    % Our layout is done in character units.
    panelWidth = prefs.minPanelWidth-prefs.charPad(1);
    panelHeight = 5*prefs.charBtnHeight + 3*prefs.charPad(2);
    size = [panelWidth+prefs.charPad(1) panelHeight].*prefs.charExtent;

    set(hImportGroup,...
        'WidthLimits', [size(1), size(1)],...
        'HeightLimits',[size(2), size(2)]);
    
    % Obtain the callback that we will use for the import menu
    importMenu = findobj(this.fileTree.fileFrame.figureHandle,...
        'Tag', 'importMenu');
    importMenuCallback = get(importMenu, 'Callback');


    % The rows should be created from top to bottom.  We calculate height
    % here, from bottom to top.
    rowHeight(1) = prefs.charPad(2);
    rowHeight(2) = rowHeight(1) + prefs.charBtnHeight + prefs.charPad(2);
    rowHeight(3) = rowHeight(2) + 2*prefs.charBtnHeight - prefs.charPad(2);
    rowHeight(4) = rowHeight(3) + prefs.charBtnHeight + prefs.charPad(2);
    rowHeight(5) = rowHeight(4) + prefs.charBtnHeight + 2*prefs.charPad(2);
    
    % ROW 5
    width = 29;
    height = rowHeight(5);
    pos = [prefs.charPad(1) height width prefs.charBtnHeight];
    % This button will appear to be a part of the panel above us (it will
    % show through that panel), but we do it's layout with the rest of
    % the import panel (since its layout does not change).
    handles.resetbutton = uicontrol(...
        'Parent',hImportGroup,...
        'Units','characters',...
        'Position',pos,...
        'String',xlate('Reset Selection Parameters'),...
        'Style','pushbutton',...
        'Tag', 'resetSelectionParameters',...
        'Callback', {@updateNodeInfoCallback this});

    % ROW 4
    width = prefs.subsetPanelContainer.leftWidth + 1;
    height = rowHeight(4);
    pos = [prefs.charPad(1) height+prefs.charLabelOffset...
        width prefs.charTextHeight];
    uicontrol(...
        'Parent',hImportGroup,...
        'Units','characters',...
        'HorizontalAlignment','left',...
        'Position',pos,...
        'String',xlate('Workspace variable:'),...
        'Style','text');

    x = 2*prefs.charPad(1)+width;
    handles.wsvarnamehandle = uicontrol(...
        'Parent',hImportGroup,...
        'Units','characters',...
        'Position',[x height 2*width prefs.charBtnHeight],...
        'String',xlate('variableName'),...
        'HorizontalAlignment', 'left',...
        'Style','edit',...
        'BackgroundColor',prefs.colorPrefs.backgroundColor, ...
        'ForegroundColor',prefs.colorPrefs.textColor, ...
        'Tag', 'workspaceVariable',...
        'Callback', @(varargin)(this.buildImportCommand(false)) );
    
    pos = [panelWidth-width-prefs.charPad(1) height width prefs.charBtnHeight];
    handles.hImportMetadata = uicontrol(...
        'Parent',hImportGroup,...
        'Units','characters',...
        'HorizontalAlignment','left',...
        'Position',pos,...
        'String',xlate('Import metadata'),...
        'Tag', 'importMetadata',...
        'Style','checkbox');

    % ROW 3
    width = 32;
    height = rowHeight(3);
    pos = [prefs.charPad(1) height+prefs.charPad(2) width prefs.charTextHeight];
    handles.helpbutton = uicontrol(...
        'Parent',hImportGroup,...
        'Units','characters',...
        'Position',pos,...
        'HorizontalAlignment', 'left',...
        'String',xlate('Dataset import command:'),...
        'Style','text');

    % ROW 2
    height = rowHeight(2); 
    pos = [prefs.charPad(1) height panelWidth-2*prefs.charPad(1) 2*prefs.charBtnHeight];
    handles.matlabCmdhandle = uicontrol(...
        'Parent',hImportGroup,...
        'Units','characters',...
        'Position',pos,...
        'String',xlate('Dataset Import Command'),...
        'Style','edit',...
        'Enable', 'on',...
        'Max', 2,...
        'HorizontalAlignment', 'left',...
        'Tag', 'datasetImportCommand',...
        'KeyPressFcn', @neverChange);
    set(handles.matlabCmdhandle,...
        'UIContextMenu', makeContextMenu(handles.matlabCmdhandle));

    % ROW 1
    height = rowHeight(1);
    width = 16;
    pos = [panelWidth-width-prefs.charPad(1) height width prefs.charBtnHeight];
    handles.importbutton = uicontrol(...
        'Parent',hImportGroup,...
        'Units','characters',...
        'Position',pos,...
        'String',xlate('Import'),...
        'Style','pushbutton',...
        'Tag', 'importButton',...
        'Callback', importMenuCallback);

    function neverChange(varargin)
        % geck 278147: The following code should require only one set command.
        if isempty(varargin{2}.Modifier) ||...
                ~strcmp(varargin{2}.Modifier{1}, 'control')
            command = this.fileTree.matlabCmd;
            set(handles.matlabCmdhandle, 'String', '');
            drawnow;
            set(handles.matlabCmdhandle, 'String', command);
        end
    end
    
    function cmenu = makeContextMenu(hEdit)
        cmenu = uicontextmenu('Parent', ancestor(hEdit, 'figure'));
        uimenu(cmenu,...
            'Label', 'Copy import command',...
            'Accelerator', 'C',...
            'Callback', @copy);
        function copy(varargin)
            text = get(hEdit, 'String');
            clipboard('copy', text);
        end
    end

end


function updateNodeInfoCallback(hObj, event, this)
    this.fileTree.fileFrame.currentPanel.updateNodeInfo;
end
