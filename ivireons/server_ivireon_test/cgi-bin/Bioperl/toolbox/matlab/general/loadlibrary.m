function [notfound,warnings]=loadlibrary(library,header,varargin)
%LOADLIBRARY Load a shared library into MATLAB. 
%   LOADLIBRARY(SHRLIB,HFILE) Loads the functions defined in
%   header file HFILE and found in library SHRLIB into MATLAB.
%
%   LOADLIBRARY(SHRLIB,@MFILE) Loads the functions defined in MFILE
%   and found in library SHRLIB into MATLAB.  MFILE is a MATLAB 
%   M-file that was previously generated by LOADLIBRARY, using the
%   MFILENAME option.  @MFILE is a function handle to that M-file.
%
%   [NOTFOUND, WARNINGS] = LOADLIBRARY('SHRLIB','HFILE') returns warning
%   information from the shrlib library file. NOTFOUND is a cell array of
%   the names of functions found in the header file HFILE, or any header
%   added with the addheader option, but not found in the SHRLIB library.
%   WARNINGS contains a single character array of warnings produced while
%   processing the header file HFILE.
%
%   LOADLIBRARY(SHRLIB,...,OPTIONS) Loads the library SHRLIB with one
%   or more of the following OPTIONS.  (Only the ALIAS option is
%   available when loading using a prototype file.)
%
%   OPTIONS:
%      'alias','name'     Allows the library to be loaded as a 
%          different library name.
%
%      'addheader','hfileN'     Loads the functions defined in the 
%          additional header file, 'hfileN'. Specify the header 
%          parameter as a filename without a file extension.  
%          MATLAB does not verify the existence of the header files 
%          and ignores any that are not needed.
%
%          You can specify as many additional header files as you need 
%          using the syntax
%             LOADLIBRARY shrlib hfile ...
%                addheader hfile1 ...
%                addheader hfile2 ...          % and so on
%
%      'includepath','path'     Adds additional include path to that used.
%
%      'mfilename','mfile'   Creates the prototype M-file mfile.m 
%          in the current directory and uses that file to load the library.  
%          Successive LOADLIBRARY commands can specify the function handle 
%          @mfile to use this prototype file as the header in loading
%          the library.  You can use this to speed up and simplify the 
%          load process.
%
%       'thunkfilename','tfile' Overrides the default thunk file name with 
%          tfile.  See the DOC LOADLIBRARY secton "Using loadlibrary on
%          64-Bit Platforms" for more information.
%
%   This function requires a C compiler.  A compiler is not normally 
%   present on 64-bit Windows  and must be installed.  See DOC LOADLIBRARY
%   for a list of supported compilers.
%
%   See also UNLOADLIBRARY, LIBISLOADED, LIBFUNCTIONS.

%   Copyright 2002-2009 The MathWorks, Inc.
%   $Revision: 1.1.6.36 $  $Date: 2010/05/13 17:39:10 $


if (nargin == 0) 
    error('MATLAB:loadlibrary:NotEnoughInputs',...
          'The library name must be specified.');
end

createThunk=false;
needsthunk = false;
if isempty(regexp(computer,'^(PCWIN|GLNX86|MACI)$')) %#ok
    needsthunk = true;
end
SharedLibExt=system_dependent('GetSharedLibExt');
            
%init local variables
preprocess_command = '';
thunkfilename = '';
cleanupTempFiles=true;
usetempdir=true;
perlopt={};
parsemsg=[];
classname=[];
mfile_name=[];
protofunction=[];
ccinclude=[];
nocpp=false;
mode=1; %default modes: 1:perl 2:mpar 3:mfile 4:matfile
genMfile=false;
debug=false;
delfiles={};  %files added to this list will be deleted when done
LibraryTempDirectory = ''; 
warnings='';
%process optional inputs
if nargin > 2
    i=1;
    while i<=length(varargin)
        str=varargin{i};
        if ~ischar(str)
            error ('MATLAB:loadlibrary:OptionsMustBeStrings','All optional inputs must be strings');
        end
        switch (str)
            case 'notempdir'
                usetempdir=false;
                cleanupTempFiles=false;
                genMfile=true;
            case 'alias'
                i=i+1;
                classname=varargin{i};
            case 'nocpp' % do not use c pre processor
                nocpp=true;
            case 'mpar' % parse using mparc
                mode=2;
            case 'ppar' % parse using perl
                mode=1;
            case 'includepath'
                i=i+1;
                %LCC gets confused if an include dir ends in \ so remove trailing \ with regexprep
                ccinclude=[ccinclude ' -I' quoteFilename(regexprep(varargin{i},'[\\/]$',''))];    %#ok<*AGROW>
            case 'mfilename'
                i=i+1;
                mfile_name=varargin{i};
                usetempdir=false;
                genMfile=true;
            case 'addheader'
                i=i+1;
                perlopt{end+1}=varargin{i};
            case 'debug'
                if i<length(varargin)
                    i=i+1;
                    perlopt{end+1}=['-debug=' varargin{i}];
                else
                    perlopt{end+1}='-debug';
                end
                debug=true;
            case 'thunkfilename'
                usetempdir=false;
                i = i +1;
                thunkfilename=varargin{i};
                if ~isempty(thunkfilename)
                    createThunk = true;
                else
                    if needsthunk
                        warning('MATLAB:loadlibrary:thunkneeded',...
                        'The current platform requires a thunk file but filename is empty no thunkfile will be created.');
                        needsthunk=false;
                    end
                end
            case 'createThunk'
                createThunk = true;
            otherwise 
                error('MATLAB:loadlibrary:InvalidOption', ...
                      'Option %s is not a valid loadlibrary option.',str); 
        end
        i=i+1;
    end
end

ccinclude=[ccinclude ' -I' quoteFilename(fullfile(matlabroot, 'extern','include'))];
try 
librarypath=lFullPath(library,SharedLibExt);
catch exception
    %The system may still be able to find the library
    if ~strcmp(exception.identifier,'MATLAB:loadlibrary:FileNotFound')
        throw(exception);
    end
    librarypath=library;
end
[~,libname]=fileparts(librarypath); % dummy is not used

if isempty(classname)
    classname=genvarname(libname);
    if strcmp(classname,libname)~=1
        warning('MATLAB:loadlibrary:ClassRenamed',...
        'The library name is not a valid name.\nThe library will be named "%s".',classname);
    elseif isempty(regexp(library,[libname '(\.[^.\\/]+)?$'], 'once' ))
        warning('MATLAB:loadlibrary:ClassCaseMismatch',...
        'The library name case did not match the file name.\nThe library will be named "%s".',classname);
    end
end

if libisloaded(classname)
    warning('MATLAB:loadlibrary:ClassIsLoaded',...
    'The library class ''%s'' already exists.  Use a classname alias.', ...
    classname);
    if (nargout>=1)
        notfound=[];
    end
    return;
end

%now figure out what the second input is and setup mode accordingly
if nargin==1
    header=libname;
end

if isa(header,'function_handle')
    mode =3;
elseif ischar(header)
    [headerpath,headername,headerext]=fileparts(header);
    ftype=exist(header,'file');
    if ftype==0 || ftype==3 %need to determine what and where it is
        if isempty(headerext)
            header = strcat(header,'.h');
            headerext='.h';
        end
    end
    switch headerext
        case '.i'
            nocpp=true;
        case '.mat'
            mode=4;
            nocpp=true;
            usetempdir=false;
        case ''
            if strcmp(headername,header) && ~isempty(which(header))
                mode=3; %if the user passed in an mfile name on the path
            end
        otherwise
            %treat the input like a header file no action is needed            
    end
    if mode<3
        header=lFullPath(header);
        [headerpath,headername]=fileparts(header);
    end
else
    error('MATLAB:loadlibrary:InvalidSecondArgument',...
        'The second argument to loadlibrary must be a c header file or A loader function or mat file.');
end

%set up for perl 
if (mode == 3 )
    nocpp=true;
    usetempdir=false;
    if (nargin>=2)
        if isa(header,'function_handle')
            protofunction=header;
        else
            protofunction=headername;
        end
    end             
elseif mode<=2
    if mode==1  %% do this here because cd later will prevent finding in private
        prototypes=which('prototypes.pl');
    end
    if needsthunk
        createThunk=true;
    end
    if (nocpp)
        preprocfile=header;
    else    
        preprocfile=[headername '.i'];
        delfiles{end+1}=preprocfile;        
    end
    switch (computer)
        case 'PCWIN'
            if createThunk
                if ~isempty(getenv('VS80COMNTOOLS')) 
                    cc='"%VS80COMNTOOLS%..\..\VC\vcvarsall.bat" >nul&cl -nologo ';                
                elseif ~isempty(getenv('VS90COMNTOOLS'))
                    cc='"%VS90COMNTOOLS%..\..\VC\vcvarsall.bat" >nul&cl -nologo ';
                else
                    error('MATLAB:loadlibrary:noMSVC','Microsoft Visual C++ 2005 or 2008 is required to use this feature.');
                end
                preprocess_command=[cc ccinclude ' -E "' header '" > "' headername '.i"'];
                thunk_build='%s %s %s "%s" -LD -Fe"%s"';
            else
                cc=fullfile(matlabroot, 'sys','lcc','bin','lcc.exe');
                if exist(cc,'file')~=2
                    error('MATLAB:loadlibrary:LccNotFound','LCC was not found at %s.',cc);
                end
                ccinclude=[ccinclude ' -I' quoteFilename(fullfile(matlabroot, 'sys', ...
                    'lcc','include')) ];
                preprocess_command =[quoteFilename(cc) ' -noregistrylookup' ccinclude ' -E ' quoteFilename(header) ];
            end
        case 'PCWIN64'
            if ~isempty(getenv('VS80COMNTOOLS')) 
                cc='"%VS80COMNTOOLS%..\..\VC\vcvarsall.bat" amd64>nul&cl -nologo ';                
            elseif ~isempty(getenv('VS90COMNTOOLS'))
                cc='"%VS90COMNTOOLS%..\..\VC\vcvarsall.bat" amd64>nul&cl -nologo ';
            else
                error('MATLAB:loadlibrary:noMSVC','Microsoft Visual C++ 2005 or 2008 is required to use this feature.');
            end
            preprocess_command=[cc ccinclude ' -E "' header '" > "' headername '.i"'];
            thunk_build='%s %s %s "%s" -LD -Fe"%s"';
        case 'GLNX86'
            cc='gcc -U __GNUC__ -m32';
            thunk_build='%s %s %s "%s" -o "%s" -Wl,-E -shared -fPIC';
        case 'GLNXA64'
            cc='gcc -U __GNUC__ -m64';
            thunk_build='%s %s %s "%s" -o "%s" -Wl,-E -shared -fPIC';
        case 'MACI'
            cc='gcc -U __GNUC__ -arch i386';
            thunk_build='%s %s %s "%s" -o "%s" -bundle -fPIC ';
        case 'MACI64'
            cc='gcc -arch x86_64';
            thunk_build='%s %s %s "%s" -o "%s" -bundle -fPIC ';
        case 'SOL64'
            cc='cc';
            thunk_build='%s %s %s "%s" -o "%s" -G -g -xarch=v9a -dalign -KPIC';
        otherwise
            error('MATLAB:loadlibrary:UnsupportedPlatform','The current platform is not yet supported by loadlibrary.');
    end
    if isempty(preprocess_command)
        preprocess_command=[cc ccinclude ' -E "' header '" > "' headername '.i"'];
    end
end

if isempty(protofunction) && (mode==1 || mode ==3) 
    if isempty(mfile_name)  
        protofunction=genvarname([classname '_proto']);
        mfile_name=[protofunction '.m'];
        if ~genMfile 
            delfiles{end+1}= mfile_name;
        end
    else
        [~,fn]=fileparts(mfile_name); 
        mfile_name=[fn '.m'];
        protofunction=fn;
    end
end

if createThunk
    if isempty(thunkfilename)
        thunkfilename = [classname '_thunk_' lower(computer)];

    end
    additional_thunk_includes = ['-I' quoteFilename(pwd)];
    if ~isempty(headerpath)
        additional_thunk_includes = [additional_thunk_includes ' -I' quoteFilename(headerpath)];
    end
    %use only full paths
    if regexp(thunkfilename,'^([a-zA-Z]:)?[\\/]')~=1
        thunkfilename = [pwd filesep thunkfilename];
    end

    thunkfilecname = [thunkfilename '.c'];
    delfiles{end+1}= thunkfilecname;
end

%for notempdir and mode 2 (mpar)
if genMfile && isempty(mfile_name)
    protofunction=genvarname([classname '_proto']);
    mfile_name=[protofunction '.m'];
end

if ~isa(protofunction,'function_handle') && exist(protofunction,'file')==3 && strcmpi(protofunction,libname)
    error('MATLAB:loadlibrary:invalid_mfilename', ...
          'The mfilename is the same as the library name and will conflict.');
end

savedir=pwd;

try
    stage='Preprocess';
    if usetempdir
        if createThunk
            LibraryTempDirectory = tempname;
            mkdir(LibraryTempDirectory);
            cd (LibraryTempDirectory);
        else
            cd(tempdir);
        end
    end
    if (~nocpp)
        [res,ccout]=system(preprocess_command);
        if (res~=0)
            error('MATLAB:loadlibrary:cppfailure',...
                  'Failed to preprocess the input file.\n Output from preprocessor is:%s',ccout);
        end
        % The LCC preprocessor which is not internationalized does not
        % properly return an error status
        if (res==0 && ~isempty(regexpi(ccout,'\<(warning|error)\>','once')) )
            warning('MATLAB:loadlibrary:cppoutput','Message from C preprocessor:\n%s',ccout);
        end
        warnings=[warnings,ccout];
    end

    if mode==1
        clear(protofunction);
        % Use perl to generate the MFile.  The Mfile should be the same
        % regardless of if we are using a precompiled thunk or not.
        if createThunk
            [parsemsg, status] = perl(prototypes, preprocfile, ['-outfile=' mfile_name],...
                ['-thunkfile=' thunkfilecname], perlopt{:});
        else
            [parsemsg,status]=perl(prototypes , preprocfile,['-outfile=' mfile_name],...
                perlopt{:});
        end
        warnings=[warnings parsemsg];
        if status<0 || status >1
            error('MATLAB:loadlibrary:cannotgeneratemfile', ...
                ['Call to Perl failed.  Possible error processing header file.\n', ...
                'Output of Perl command:\n%s'] ,parsemsg);
        elseif nargout < 2
            if debug 
                disp(parsemsg);
            elseif status==1 
            warning('MATLAB:loadlibrary:parsewarnings',...
                ['Warnings messages were produced while parsing.  Check the functions you\n',...
                'intend to use for correctness.  Warning text can be viewed using:\n',...
                '[notfound,warnings]=loadlibrary(...)']);
            end
        end
        loop=1;
        fschange(pwd);
        while (exist(mfile_name,'file')~=2)
            if (loop>256)
                error('MATLAB:loadlibrary:PrototypeFileNotFound',...
                    ['The mfile describing your library could not be found' ...
                    ' possible Perl or file system error.']);
            end
            pause(loop*0.01);
            fschange(pwd);
            loop=loop*2;
        end;
        clear loop;
    end
    
    if createThunk
        if isempty(thunkfilename)
            error('MATLAB:loadLibrary:EmptyThunkfileNames','The thunkfile name is not allowed to be empty.');
        end
        thunk_compile_command=sprintf(thunk_build,cc,ccinclude,additional_thunk_includes,thunkfilecname,addfileext(thunkfilename, SharedLibExt));
        [status,results]=system(thunk_compile_command);
        warnings=[warnings results];
        if (status~=0)
            error('MATLAB:loadlibrary:CompileFailed','Building %s failed.  Compiler output is:\n%s',thunkfilename,results);
        end
    end
    
    if mode==1 || mode == 3     % protofunction is provided by function handle
       stage='RunFn';
       try
           [fcns,structs,enums,thunkfilename]=feval(protofunction);
       catch err
           if strcmp(err.identifier,'MATLAB:TooManyOutputs')
               warning('MATLAB:loadlibrary:OldStyleMfile',...
                   'A loader file was supplied that was built with a previous version of MATLAB that will not be supported in future versions of MATLAB.');
               [fcns,structs,enums]=feval(protofunction);
           else
               err.rethrow;
           end
       end
    elseif mode==2
       stage='mparc';
       [fcns,structs,enums]=mparc(preprocfile);
       %need to write out mfile here if needed
       if genMfile
           mcheaderexternal(fcns,structs,enums,mfile_name);
       end
    else % mode better be 4
        %not yet tested and fully implemented
        load(header);
    end
    
    stage='LoadDefined';
    if ~isempty(thunkfilename)
        thunkfilename=addfileext(thunkfilename,SharedLibExt);
    end
    loaddefinedlibrary(librarypath,fcns,classname,structs,enums, thunkfilename, LibraryTempDirectory);
        
    deltempfiles(delfiles,cleanupTempFiles);

    cd(savedir);

    if (nargout>=1)
        loaded=methods(['lib.' classname]);
        if (isempty(loaded) )
            warning('MATLAB:loadlibrary:nofunctions', ...
                    'No functions found in library.');
            notfound=fcns.name;
        else
            notfound=setdiff(fcns.name,loaded );
        end
    end
catch exception
    deltempfiles(delfiles,cleanupTempFiles);
    cd(savedir);
    throw(diagnoseError(exception,stage,mode));
end

    function err=diagnoseError(err,stage,mode)
    %this function uses stage and last error in conjunction with current
    %state to diagnose the error and print out helpful information
        loaderError=false;
        switch (stage)
            case 'RunFn'
                loaderError=true;
            case 'LoadDefined'
            otherwise
        end
        if ~any(strcmp(err.identifier,...
                {'MATLAB:UndefinedFunction','MATLAB:loadlibrary:LoadFailed'})) || debug
            if ~isempty(parsemsg)
                fprintf('Error loading library intermediate output follows.\n')
                fprintf('The actual error is at the end of this output.\n');
                fprintf('*********\n%s*********\n',parsemsg);
            end
            if loaderError  
                if (length(err.stack)>1)
                    location=err.stack(1);
                else
                    location=regexp(err.message,...
                        'Line:\s+(?<line>\d+)\s+Column:\s+(?<column>\d+)','names');
                    if numel(location) >= 1
                        location.line=str2double(location.line);
                        location.file=mfile_name;
                        if isa(protofunction,'function_handle');
                            location.name=func2str(protofunction);
                        else
                            location.name=protofunction;
                        end
                    end
                end
                                   
                if mode>2 && ~isempty(location)
                    new_err = MException(err.identifier, ['%s\nError in ==>%s at %d\n'...
                        'There was an error running %s.\n' ...
                        'Run %s from the command line to reproduce the error and fix it.\n'],...
                        err.message,location.name,location.line,location.file,location.name);
                else
                    new_err = MException(err.identifier, sprintf('%s\n', ...
                    'There was an error running the loader mfile.  Use the mfilename option',...
                    'to produce a file that you can debug and fix if needed.  Please report',...
                    'this error to the MathWorks so we can improve this function.'));
                end
                new_err=addCause(new_err,err);
                new_err.throwAsCaller;
            end
        else
            new_err = MException(err.identifier, 'There was an error loading the library "%s"\n%s', librarypath,err.message);
            new_err=addCause(new_err,err);
            new_err.throwAsCaller;
        end
        rethrow(err);
        
    end %nested function diagnoseError
end % function loadlibrary

function filepath=lFullPath(srcfile,ext)
% find the full path to a file on the path that is not an m file
% but is on the matlab path
filepath=which(srcfile);  %
if isempty(filepath) && nargin==2
    filepath=lFullPath(addfileext(srcfile,ext));
elseif isempty(filepath) || (exist(filepath,'file')==2 &&  strcmpi(filepath(end-1:end),'.m'))
    % the next code is for relitive paths
    if ~isempty(dir(fullfile(pwd,srcfile)))
        srcfile=fullfile(pwd,srcfile);
    end
    if isempty(dir(srcfile))
        error('MATLAB:loadlibrary:FileNotFound',...
              'Could not find file %s.',srcfile);
    end
    filepath=srcfile;
end
end % function lFullPath

function fname=addfileext(fname,ext)
% Add a file extension if one does not exist in fname
ind = regexp(fname,'\.[^.\\/]*$'); %#ok<RGXP1>
if isempty(ind)
    fname=[fname  ext];
end
end

function filename=quoteFilename(filename)
    filename=[ '"' filename '"'];
end % function quoteFilename

function deltempfiles(tempfiles,cleanup)
if cleanup
    for i=tempfiles
        if exist(i{1},'file')
            delete(i{1});
        end
    end
end
end % function deltempfiles
