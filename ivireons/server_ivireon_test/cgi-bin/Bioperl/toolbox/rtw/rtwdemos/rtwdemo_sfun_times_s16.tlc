%% File : rtwdemo_sfun_times_s16.tlc
%%
%% Description: 
%%   Real-Time Workshop TLC Code Generation file for rtwdemo_sfun_times_s16
%%
%% Simulink version      : 7.6 (R2010b) 28-Jun-2010
%% TLC file generated on : 30-Jun-2010 02:25:01

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'rtwdemo_sfun_times_s16';
     def.OutputFcnSpec = 'myFixpt y1 = timesS16(myFixpt u1, myFixpt u2, uint8 p1)';
     def.HeaderFiles = {'timesFixpt.h'};
     def.SourceFiles = {'timesS16.c'};
     def.IncPaths = {'sldemo_lct_src'};
     def.SrcPaths = {'sldemo_lct_src'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements rtwdemo_sfun_times_s16 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%%
%function FcnGenerateUniqueFileName(filename, type) void
  %%
  %assign isReserved = TLC_FALSE
  %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
    %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
    %if (thisFile.Name==filename) && (thisFile.Type==type)
      %assign isReserved = TLC_TRUE
      %break
    %endif
  %endforeach
  %if (isReserved==TLC_TRUE)
    %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
  %endif
  %return filename
  %%
%endfunction

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %assign ver = FEVAL("ver", "simulink")
  %assign factor = 1.0
  %assign slVer = 0.0
  %foreach idx = SIZE(ver.Version)[1]
    %if ISEQUAL(ver.Version[idx], ".")
      %assign factor = factor/10.0
    %else
      %assign slVer = slVer + %<ver.Version[idx]>*factor
    %endif
  %endforeach

  %if GenerateErtSFunction==1 && slVer < 6.21
    %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
  %endif

  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"

    %assign hFileName = FcnGenerateUniqueFileName("rtwdemo_sfun_times_s16_wrapper", "header")
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #include "tmwtypes.h"

    extern void rtwdemo_sfun_times_s16_wrapper_output( void *y1, const void *u1, const void *u2, const uint8_T p1);

    #endif
    %closefile hFile

    %assign cFileName = FcnGenerateUniqueFileName("rtwdemo_sfun_times_s16_wrapper", "source")
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #include "tmwtypes.h"
    #include "timesFixpt.h"

    void rtwdemo_sfun_times_s16_wrapper_output( void *y1, const void *u1, const void *u2, const uint8_T p1) {


      *(myFixpt *) y1 = timesS16( *(myFixpt *) u1, *(myFixpt *) u2, (uint8_T)(p1));

    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else

    %<LibAddToCommonIncludes("timesFixpt.h")>

  %endif

    %<SLibAddToStaticSources("timesS16.c")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"
  %else
    %<LibBlockSetIsExpressionCompliant(block)>
  %endif
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"
    %assign p1_val = LibBlockParameter(p1, "", "", 0)
    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    rtwdemo_sfun_times_s16_wrapper_output( %<y1_ptr>, %<u1_ptr>, %<u2_ptr>, %<p1_val>);
  %else 
    %if !LibBlockOutputSignalIsExpr(0)
      %assign p1_val = LibBlockParameter(p1, "", "", 0)
      %assign u1_val = LibBlockInputSignal(0, "", "", 0)
      %assign u2_val = LibBlockInputSignal(1, "", "", 0)
      %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
      %%
      %<y1_val> = timesS16( (myFixpt)%<u1_val>, (myFixpt)%<u2_val>, (uint8_T)%<p1_val>);
    %endif 
  %endif 
  %%
%endfunction

%% Function: BlockOutputSignal ============================================
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %%
  %assign p1_val = LibBlockParameter(p1, "", "", 0)
  %assign u1_val = LibBlockInputSignal(0, "", "", 0)
  %assign u2_val = LibBlockInputSignal(1, "", "", 0)
  %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
  %%
  %switch retType
    %case "Signal"
      %if portIdx == 0
        %return "timesS16( (myFixpt)%<u1_val>, (myFixpt)%<u2_val>, (uint8_T)%<p1_val>)"
      %else
        %assign errTxt = "Block output port index not supported: %<portIdx>"
        %<LibBlockReportError(block,errTxt)>
      %endif
    %default
      %assign errTxt = "Unsupported return type: %<retType>"
      %<LibBlockReportError(block,errTxt)>
  %endswitch
  %%
%endfunction

%% [EOF]
