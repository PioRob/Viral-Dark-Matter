%% File : rtwdemo_sfun_counterbus.tlc
%%
%% Description: 
%%   Real-Time Workshop TLC Code Generation file for rtwdemo_sfun_counterbus
%%
%% Simulink version      : 7.6 (R2010b) 28-Jun-2010
%% TLC file generated on : 30-Jun-2010 02:24:34

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'rtwdemo_sfun_counterbus';
     def.OutputFcnSpec = 'void counterbusFcn(COUNTERBUS u1[1], int32 u2, COUNTERBUS y1[1], int32 y2[1])';
     def.HeaderFiles = {'counterbus.h'};
     def.SourceFiles = {'counterbus.c'};
     def.IncPaths = {'sldemo_lct_src'};
     def.SrcPaths = {'sldemo_lct_src'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements rtwdemo_sfun_counterbus "C"

%% Function: FcnGenerateUniqueFileName ====================================
%%
%function FcnGenerateUniqueFileName(filename, type) void
  %%
  %assign isReserved = TLC_FALSE
  %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
    %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
    %if (thisFile.Name==filename) && (thisFile.Type==type)
      %assign isReserved = TLC_TRUE
      %break
    %endif
  %endforeach
  %if (isReserved==TLC_TRUE)
    %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
  %endif
  %return filename
  %%
%endfunction

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %assign ver = FEVAL("ver", "simulink")
  %assign factor = 1.0
  %assign slVer = 0.0
  %foreach idx = SIZE(ver.Version)[1]
    %if ISEQUAL(ver.Version[idx], ".")
      %assign factor = factor/10.0
    %else
      %assign slVer = slVer + %<ver.Version[idx]>*factor
    %endif
  %endforeach

  %if GenerateErtSFunction==1 && slVer < 6.21
    %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
  %endif

  %if ExtMode==1 && slVer < 6.3
    %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
  %endif

  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"

    %if slVer < 6.21
      %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
    %endif

    %assign hFileName = FcnGenerateUniqueFileName("rtwdemo_sfun_counterbus_wrapper", "header")
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #include "tmwtypes.h"

    extern void rtwdemo_sfun_counterbus_wrapper_output( const void *u1, void *__u1BUS, const int32_T u2,  void *y1, void *__y1BUS,  int32_T *y2);

    #endif
    %closefile hFile

    %assign cFileName = FcnGenerateUniqueFileName("rtwdemo_sfun_counterbus_wrapper", "source")
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #include "tmwtypes.h"
    #include "counterbus.h"

    void rtwdemo_sfun_counterbus_wrapper_output( const void *u1, void *__u1BUS, const int32_T u2,  void *y1, void *__y1BUS,  int32_T *y2) {

      /*
       * Assign the Simulink Structure u1 to Legacy Structure __u1BUS
       */
      %assign dTypeId = LibBlockInputSignalDataTypeId(0)
      %<SLibAssignSLStructToUserStruct(dTypeId, "(*(COUNTERBUS *)__u1BUS)", "(char *)u1", 0)>


      counterbusFcn( (COUNTERBUS *) __u1BUS, (int32_T)(u2), (COUNTERBUS *) __y1BUS, y2);

      /*
       * Assign the Legacy Structure __y1BUS to the Simulink Structure y1
       */
      %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
      %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(COUNTERBUS *)__y1BUS)", 0)>

    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else

    %<LibAddToCommonIncludes("counterbus.h")>

  %endif

    %<SLibAddToStaticSources("counterbus.c")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"
  %else
    %<LibBlockSetIsExpressionCompliant(block)>
  %endif
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"
    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u1BUS_ptr = LibBlockDWorkAddr(u1BUS, "", "", 0)
    %assign u2_val = LibBlockInputSignal(1, "", "", 0)
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y1BUS_ptr = LibBlockDWorkAddr(y1BUS, "", "", 0)
    %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    rtwdemo_sfun_counterbus_wrapper_output( %<u1_ptr>, %<u1BUS_ptr>, %<u2_val>, %<y1_ptr>, %<y1BUS_ptr>, %<y2_ptr>);
  %else 
    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u2_val = LibBlockInputSignal(1, "", "", 0)
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
    %%
    counterbusFcn( (COUNTERBUS*)%<u1_ptr>, (int32_T)%<u2_val>, %<y1_ptr>, %<y2_ptr>);
  %endif 
  %%
%endfunction

%% [EOF]
