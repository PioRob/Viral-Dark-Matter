classdef VariableReporter < handle
% VariableReporter is the abstract base class of variable reporters.
% A variable reporter generates an XML fragment that describes the 
% value of the variable.

% Copyright 2010 The MathWorks, Inc.

  
  properties
        
    % Value of the variable to be reported.
    VarValue
    
    % Report to include this variable report. Note that the value of
    % this property is UDD object (udd) of type 
    % rpt_xml.document class.
    uddReport
    
    % Report fragment generated by this reporter.
    uddVarReport
    
    % UDD source object for the DDG dialog associated with this report
    moOpts
    
    % Hyperlink to the report for an object that contains the
    % object described by this reporter.
    joParentLink
    
    % Depth of this reporter in a report hierarchy.
    ReportLevel = 1
    
    % ReportTitle is the title of this report.
    ReportTitle
    
    % String that identifies this report, distinguishing it from 
    % other reports for the same variable.
    ReportId
    
  end % of properties
  
  methods (Abstract)
    
    % Make a report. This method determines a format for the report based
    % on the variable's data type.
    uddVarReport = makeAutoReport(moReporter)
        
    % Make a tabular report for this variable. This method returns a 
    % table whose title is the variable name and whose cell entry (or
    % entries) are the value (or values) of the variable.
    uddVarReport = makeTabularReport(moReporter)
    
  end % of abstract methods
  
  methods
    
    function moReporter = VariableReporter(moOpts, uddReport, varName, ...
        varValue)
    % moReporter = VariableReporter(moOpts, uddReport, VarName, VarValue)
    % creates a reporter (moReporter) for the variable whose name is
    % VarName, whose value is VarValue, for inclusion in uddReport.
    % moOpts is the source object for a DDG dialog that specifies
    % various report options.
      import rptgen.cmpn.VariableReporters.*;
      moReporter.moOpts = moOpts;
      moReporter.VarValue = varValue;
      moReporter.uddReport = uddReport;
      moReporter.uddVarReport = uddReport.createDocumentFragment();
      moReporter.ReportTitle = moReporter.getReportTitle(varName);
      moQueue = ReporterQueue.getTheQueue();
      idStr = num2str(moQueue.getReporterId());
      moReporter.ReportId = [moReporter.ReportTitle idStr];
    end
    
    function uddVarReport = report(moReporter)
    % uddVarReport = report(moReporter) generates a report on the object
    % for which this reporter is responsible. This method generates
    % three types of reports: inline, paragraph, or tabular, depending
    % on the report type options specified by the user in the associated
    % DDG dialog.
      switch moReporter.moOpts.DisplayTable
        case 'auto'
          uddVarReport = moReporter.makeAutoReport;
        case 'table'
          uddVarReport = moReporter.makeTabularReport;
        case 'para'
          uddVarReport = moReporter.makeParaReport;
        case 'text'
          uddVarReport = moReporter.makeTextReport;         
      end
    end
    
    function joTextValue = getTextValue(moReporter)
    % joTextValue = getTextValue(moReporter) gets the value of the 
    % reported variable as a Java DOM text object.
      joTextValue = moReporter.uddReport.createTextNode(rptgen.toString(moReporter.VarValue));
    end
    
    function joBodyText = makeReportBodyText(moReporter)
    % joBodyText = makeReportBodyText(moReporter) generates the body
    % portion of the variable report, i.e., the report exclusive of the
    % title.
       joBodyText = moReporter.uddReport.createElement('phrase', ...
        moReporter.getTextValue());
    end
    
    function uddVarReport = makeTextReport(moReporter)
    % uddVarReport = makeTextReport(moReporter) makes a text report for 
    % the variable owned by this reporter. The report optionally includes
    % a title that optionally includes the variables data type. The 
    % options are specified by the DDG dialog associated with this
    % reporter.
      uddVarReport = moReporter.uddVarReport;
      joBodyText = moReporter.makeReportBodyText();
      joTitle = moReporter.makeTitleText();
      if isempty(joTitle)
         % Create an anchor in case there is a back link to this
         % report.
         joAnchor = moReporter.makeAnchor(moReporter.ReportId,''); 
         uddVarReport.appendChild(joAnchor);
      else
        % Note that the title contains an anchor for back links to this
        % report.
        joEmphasis = moReporter.uddReport.createElement('emphasis', joTitle);
        joEmphasis.setAttribute('role', 'italic');
        joEmphasis.setAttribute('xml:space', 'preserve');
        uddVarReport.appendChild(joEmphasis);
      end
      uddVarReport.appendChild(joBodyText);
    end
    
    function uddVarReport = makeParaReport(moReporter)
    % uddVarReport = makeParaReport(moReporter) makes a paragraph report 
    % for the variable owned by this reporter. The report has an optional 
    % title that may optionally include the variable's data type. The
    % title options are specified by the DDG dialog associated with 
    % this reporter.
      uddVarReport = moReporter.uddVarReport;
      joValue = moReporter.makeReportBodyText();
      joPara = moReporter.uddReport.createElement('para');
      joPara.appendChild(joValue);
      joTitle = moReporter.makeTitleText();
      if isempty(joTitle)
         % Create an anchor in case there is a back link to this
         % report.
        joAnchor = moReporter.makeAnchor(moReporter.ReportId,''); 
        uddVarReport.appendChild(joAnchor);
      else
        % Note that the title contains an anchor for back links to this
        % report.
        joTitle = moReporter.uddReport.createElement('title', joTitle);
        joFormalPara = moReporter.uddReport.createElement('formalpara');
        joFormalPara.appendChild(joTitle);
        joFormalPara.appendChild(joPara);
        joPara = joFormalPara;
      end
      uddVarReport.appendChild(joPara);
    end
    
    function joValueTable = makeValueTable(moReporter, caTable)
    % joValueTable = makeValueTable(moReporter, caTable) creates a
    % table of the values of the variable owned by this report. caTable
    % is a cell array that contains the values. This method optionally
    % creates a title for the table that optionally includes the variable's
    % data type.
      import rptgen.cmpn.VariableReporters.*;
      try
        joTableMaker = moReporter.uddReport.makeNodeTable(caTable);
        joTableMaker.setBorder(moReporter.moOpts.ShowTableGrids);
        joTableMaker.setNumHeadRows(0);
        joTableMaker.setPageWide(moReporter.moOpts.MakeTablePageWide);
        joTableTitle = moReporter.makeTableTitle();
        if ~isempty(joTableTitle)
          joTableMaker.setTitle(joTableTitle);
        end
        joTable = joTableMaker.createTable();
        if isempty(joTableTitle)
          % Create an anchor in case there is a back link to this
          % report.
          joValueTable = moReporter.uddReport.createDocumentFragment();
          joAnchor = moReporter.makeAnchor(moReporter.ReportId,''); 
          joValueTable.appendChild(joAnchor);
          joValueTable.appendChild(joTable);
        else
          % joTable contains a title that includes an anchor to this
          % report.
          joValueTable = joTable;
        end
      catch TableCreationException
        errorText = sprintf(msg('ErrCantCreateVarTbl'), ...
                    moReporter.ReportTitle, TableCreationException.message);
        joValueTable = moReporter.uddReport.createElement('emphasis', errorText);
      end

    end % makeValueTable
    
    function joTableTitle = makeTableTitle(moReporter)
      import rptgen.cmpn.VariableReporters.*;
      joTableTitle = [];
      if isempty(moReporter.joParentLink)
         % Note: the following conditional expression deliberately checks
         % for a TitleMode of 'none' as opposed to an empty
         % moReporter.ReportTitle. This is to allow this report to not
         % display a title but still be a target for back links for 
         % embedded objects, i.e., for this report to have a title that
         % it does not display.
         if ~strcmp(moReporter.moOpts.TitleMode, 'none')
           tableTitle = moReporter.ReportTitle;
           if moReporter.moOpts.ShowTypeInHeading
              tableTitle = [sprintf(msg('VarTblTypeInHd'), class(moReporter.VarValue)) ...
                tableTitle];
           end
           joTableTitle = moReporter.uddReport.createElement('phrase');
           joTableTitle.appendChild(moReporter.uddReport.createTextNode(tableTitle));
           joAnchor = moReporter.makeAnchor(moReporter.ReportId,''); 
           joTableTitle.appendChild(joAnchor);
        end
      else
         % This reporter was spawned by another reporter to report on 
         % an embedded object. The other reporter created a link to itself
         % and assigned it to moReporter.joParentLink. Use that link as the
         % title of the table that contains the data reported by this reporter.
        joTableTitle = moReporter.uddReport.createElement('phrase');
        if moReporter.moOpts.ShowTypeInHeading
          typePrefix = sprintf(msg('VarTblTypeInHd'), class(moReporter.VarValue));
          joTypePrefix = moReporter.uddReport.createTextNode(typePrefix);
          joTableTitle.appendChild(joTypePrefix);
        end
        joTableTitle.appendChild(moReporter.joParentLink);
      end
    end
    
    function joTitleFrag = makeTitleText(moReporter)
    % joTitleFrag = makeTitleText(moReporter) generates a title suitable
    % for use in an inline or paragraph report generated by this reporter.
    % The title may include the data type of the variable owned by this
    % reporter. If another variable contains this variable, the generated
    % title includes a hyperlink to the report for the containing
    % variable.
      import rptgen.cmpn.VariableReporters.*;
      joTitleFrag = [];
      if isempty(moReporter.joParentLink)
         % Note: the following conditional expression deliberately checks
         % for a TitleMode of 'none' as opposed to an empty
         % moReporter.ReportTitle. This is to allow this report to not
         % display a title but still be a target for back links for 
         % embedded objects, i.e., for this report to have a title that
         % it does not display.
        if ~strcmp(moReporter.moOpts.TitleMode, 'none')
          title = moReporter.ReportTitle;
          if moReporter.moOpts.ShowTypeInHeading
             typePrefix = sprintf(msg('VarTblTypeInHd'), class(moReporter.VarValue));
             title = [typePrefix title];
          end
          joTitleText = ...
            moReporter.uddReport.createTextNode(title);
          joTitleFrag = moReporter.uddReport.createDocumentFragment();
          joTitleFrag.appendChild(joTitleText);
          joAnchor = moReporter.makeAnchor(moReporter.ReportId, '');
          joTitleFrag.appendChild(joAnchor);
        end
      else
        joTitleFrag = moReporter.uddReport.createDocumentFragment();
        if moReporter.moOpts.ShowTypeInHeading
          typePrefix = sprintf(msg('VarTblTypeInHd'), class(moReporter.VarValue));
          joTypePrefix = moReporter.uddReport.createTextNode(typePrefix);
          joTitleFrag.appendChild(joTypePrefix);
        end
        joTitleFrag.appendChild(moReporter.joParentLink);
      end      
    end
    
    
    function reportTitle = getReportTitle(moReporter, varName)
      % reportTitle = getReportTitle(moReporter) returns 
      % the report title specified by the user.
      switch moReporter.moOpts.TitleMode
        case 'none'
          reportTitle = '';
        case 'manual'
          reportTitle = moReporter.moOpts.CustomTitle;
        otherwise
          reportTitle = varName;
      end
    end
    
    function joAnchor = makeAnchor(moReporter, id, text)
      ad = rptgen.appdata_rg;
      if ~ad.RootComponent.isDebug
        id = rptgen.hash(id);
      end
      joAnchor = moReporter.uddReport.makeLink(id, text,'anchor');
    end
    
    function joLink = makeLink(moReporter, id, text)
      ad = rptgen.appdata_rg;
      if ~ad.RootComponent.isDebug
        id = rptgen.hash(id);
      end
      joLink = moReporter.uddReport.makeLink(id, text,'link');
    end
    
    function makeBackLink(moReporter, moLinkedReporter, postfix)
      if isempty(moReporter.ReportTitle)
        baseTitle = class(moReporter.VarValue);
      else
        baseTitle = moReporter.ReportTitle;
      end
      joLink = moReporter.makeLink(moReporter.ReportId, baseTitle);
      joEmphasis = moReporter.uddReport.createElement('emphasis', joLink);
      joEmphasis.appendChild(moReporter.uddReport.createTextNode(postfix));
      joEmphasis.setAttribute('role', 'bold');
      joEmphasis.setAttribute('xml:space', 'preserve');
      joAnchor = moReporter.makeAnchor(moLinkedReporter.ReportId, '');
      joLinkPhrase = moReporter.uddReport.createElement('phrase', joAnchor);
      joLinkPhrase.appendChild(joEmphasis);
      moLinkedReporter.joParentLink = joLinkPhrase;
    end
    
    function registerLink(moReporter) %#ok<MANU>
    % registerLinkToSelf registers this reporter, if appropriate, with
    % the LinkResolver. The base method does nothing. Objects whose
    % properties can refer to other objects should override this method
    % to avoid duplicate object reports and reference cycles.
    end
    
        
  end % dynamic methods
  

  
end % VariableReporter class

