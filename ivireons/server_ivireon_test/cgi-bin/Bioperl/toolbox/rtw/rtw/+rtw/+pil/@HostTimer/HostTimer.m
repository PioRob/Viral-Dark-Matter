classdef HostTimer < rtw.connectivity.Timer
% HOSTTIMER is a Timer subclass to get timing information for the application 
% running on the host
%
%   HOSTTIMER(TARGETAPPLICATIONFRAMEWORK) obtains DATATYPE, SOURCEFILE,
%   HEADERFILE, TIMERFUNCTION and SECONDSPERTICK and passes them
%   as arguments to the TIMER superclass
%
%   See also RTW.CONNECTIVITY.TIMER
%
%   Copyright 2009 The MathWorks, Inc.

    methods
    % constructor
    function this = HostTimer(targetApplicationFramework)
        % Initializes the properties of the timer class
        timerDatatype = 'int32_T';
        headerFile = fullfile(matlabroot, ...
                               'toolbox', ...
                               'rtw', ...
                               'targets', ...
                               'pil', ...
                               'c', ...
                               'host_timer.h');
        switch computer
            case 'PCWIN'
                  
                % seconds per tick is unknown and depends on the CPU clock
                % frequency
                secondsPerTick = [];
                timerSourceFile = fullfile(matlabroot, ...
                               'toolbox', ...
                               'rtw', ...
                               'targets', ...
                               'pil', ...
                               'c', ...
                               'host_timer_pcwin32.c');
                
                timerFunction = 'pentium_cyclecount()';
                
            case 'PCWIN64'
                
                % seconds per tick is unknown and depends on the CPU clock
                % frequency
                secondsPerTick = [];
                timerSourceFile = fullfile(matlabroot, ...
                               'toolbox', ...
                               'rtw', ...
                               'targets', ...
                               'pil', ...
                               'c', ...
                               'host_timer_pcwin64.c');
                
                timerFunction = 'pentium_cyclecount()';
                
            case {'MAC' ...
                  'MACI' ...
                  'MACI64'}
                % seconds per tick is unknown and depends on the CPU clock
                % frequency
                secondsPerTick = [];
                timerSourceFile = fullfile(matlabroot, ...
                               'toolbox', ...
                               'rtw', ...
                               'targets', ...
                               'pil', ...
                               'c', ...
                               'host_timer_apple.c');
                timerFunction = 'cputime_stamp()';
                                         
             case {'GLNX86' ...
                   'GLNXA64'}
                % seconds per tick is unknown and depends on the CPU clock
                % frequency
                secondsPerTick = [];
                timerSourceFile = fullfile(matlabroot, ...
                               'toolbox', ...
                               'rtw', ...
                               'targets', ...
                               'pil', ...
                               'c', ...
                               'host_timer_linux.c');
                timerFunction = 'pentium_cyclecount()';
             
        end
        % call the super class constructor to register the properties
        this@rtw.connectivity.Timer(timerDatatype, timerSourceFile,...
                                    secondsPerTick, timerFunction, headerFile,...
                                    targetApplicationFramework);
       end
    end  

    
end
