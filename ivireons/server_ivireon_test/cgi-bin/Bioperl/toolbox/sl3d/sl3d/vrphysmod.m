function vrphysmod(vrmlfile, physmod)
%VRPHYSMOD Add virtual reality visualization framework to a block diagram.
%   VRPHYSMOD(VRMLFILE, MODEL_OR_SUBSYSTEM) updates the Simulink model
%   generated by MECH_IMPORT with additional blocks that are necessary
%   to visualize the mechanical system in virtual reality. You can then
%   save, rename, modify and run the model. The .wrl extension for the
%   VRMLFILE argument is optional.
%
%   The association between mechanical system bodies and corresponding
%   VRML nodes found in the VRML file is based on the name correspondence.
%
%   The model defined in the second argument must be either on MATLAB path 
%   or open prior to calling this function. It is not allowed to define
%   model path in the PHYSMOD argument.
%
%   When saving the resulting model, it is important that the relative path
%   between the Simulink model and the VRML file, as defined by the optional 
%   path in the first argument, is preserved.
%
%   When there are existing Virtual Reality Sink blocks referring to
%   VRMLFILE, VRPHYSMOD tries to consolidate the animation signals of that
%   virtual scene into one VR Sink block.
%
%   Example:
%     vrphysmod('four_link.wrl', 'four_link');
%     vrphysmod('four_link.wrl', 'four_link/FOURLINK_ASM');
%     vrphysmod('four_link.wrl', gcs);
%
% Known issues:
% - SolidWorks VRML export filter doesn't preserve part instance names and
%   the order of parts in the resulting VRML file. Thus it is impossible
%   to find a correct exact match between such parts and corresponding
%   bodies in the block diagram. In such a case, nodes with partial match
%   are identified and warning message is issued. Please make sure that
%   DEF names of nodes in the VRML file are identical to their
%   corresponding bodies in the Simulink model before using this function.
%
%   If you encounter this warning when the set of VRML files does not
%   originate in SolidWorks, you can ignore it. Other supported CAD tools
%   also generate part names with similar names, but preserve them across
%   different export formats.
%
%   Example of potential mismatch:
%   Solidworks parts 'part<1>', 'part<2>' and 'part<3>', representing three
%   instances of an identical geometry, are translated to XML and Simulink
%   models as 'part-1', 'part-2' and 'part-3'. To the VRML model they can be
%   exported as 'part', 'part-2' and part-3, but also as 'part', 'part-4' and 'part-3'.
%   It is up to the user to identify the correct body - VRML node pairs
%   based on the visual inspection.
%
%   See also STL2VRML, VRCADCLEANUP.

%   Copyright 1998-2010 HUMUSOFT s.r.o. and The MathWorks, Inc.
%   $Revision: 1.1.6.7 $ $Date: 2010/04/15 15:51:02 $ $Author: batserve $


% test number of input arguments
error(nargchk(2, 2, nargin, 'struct'));

if ~ischar(vrmlfile) || isempty(vrmlfile)
  error('VR:invalidinarg', 'VRML file input must be a non-empty string.')
end

if ~ischar(physmod) || isempty(physmod)
  % block handles will not work as currently programmed
  error('VR:invalidinarg', 'Model input must be a non-empty string.')
end

% strip the '.mdl' suffix from the physmod parameter, if specified
% (to allow full model name as argument, but use find_system correctly)
physmod = regexprep(physmod, '\.mdl$', '', 'ignorecase');

% add '.wrl' extension if no extension
[~, ~, ext] = fileparts(vrmlfile); 
if isempty(ext)
  vrmlfile = [vrmlfile '.wrl'];
end

% test for VRML file existence
if ~exist(vrmlfile, 'file')
  error('VR:filenotexist', 'The VRML file %s does not exist.', vrmlfile);
end

% identify if the physmod parameter is in the format 'model/subsystem'
% if physmod is only a model filename, it can be used for opening the
% model, otherwise only the part until the first slash ('/';'\') is used
modfile = cell2mat(regexp(physmod, '(^.+?)[\\/]', 'tokens', 'once'));
if isempty(modfile)  
 modfile = physmod;
end

% test for model file existence
if ~exist(modfile, 'file')
  error('VR:filenotexist', 'The model %s does not exist.', modfile);
end

% open the model if not open already
loaded = bdIsLoaded(modfile);
if ~loaded
  try
    open_system(modfile);
  catch ME
    error('VR:cantopenfile', 'Cannot open the model "%s". ', modfile);
  end
end

% we now always consolidate
% consolidation=0;

% Find all the VR Sinks that are pointing to VRMLFILE
vrmlfile_sinks = find_system(bdroot(physmod), 'LookUnderMasks', 'all', 'MaskType', ...
  'Virtual Reality Sink', 'WorldFileName', vrmlfile);

% build the list of DEFed Transforms
% try to open the world
wh = vrworld(vrmlfile, 'new');
try
  open(wh);
catch ME
  throwAsCaller(ME);
end
allnodes = get(wh, 'Nodes');

% nodes are listed in the reverse order vs. the order in the file, thus flipud()
transforms = flipud(allnodes(strcmp(get(allnodes, 'Type'), 'Transform')));
tnames = get(transforms, 'Name');
% if just one Transform found, the get above returns char, we need a cell array
tnames = cellstr(tnames);

% get full name to be used by fopen()
fullvrmlfile = get(wh, 'FileName');

% close the vrworld, it will be opened by VR Sink once needed again
try
  close(wh);
  delete(wh);
catch ME  %#ok<NASGU>  ME is unused
end

% read input VRML file into lines{}, check for VRCADCLEANUP hints
% in the first 20 lines of the file
fR = fopen(fullvrmlfile, 'rt');
if (fR == -1)
  error('VR:cantopenfile', 'Could not open the input VRML file.');
end
lines = {};
n = 0;
while n < 20
  tline = fgetl(fR);
  if ~ischar(tline), break, end
  lines{end+1} = tline;
  n = n + 1;
end
fclose(fR);

% set hints accordingly
hints = '';
hintline = strmatch('#_Hints: ', lines);
if ~isempty(hintline)
  hints = strrep(lines(hintline), '#_Hints: ', '');
end

% Find all PM Components in the physmod main hierarchy level
% mech_import creates a masked subsystem if 'SubsystemToImportInto'
% specified, thus 'LookUnderMasks' 'all'.
allpmcs = find_system(physmod, 'LookUnderMasks', 'all', 'BlockType', 'PMComponent');
% PM Component names
pmcnames = get_param(allpmcs, 'Name');

% Select those VR Transforms that have their analogy in the physmod
% diagram. Only these will be visualized.
% Store corresponding bodies in bodies{}. The Transform and Body
% names can have different case (due to possible differences in VRML and
% XML exports), we have to preserve the case of both to make the
% connections to VR and between Simulink blocks right.
count = length(tnames);
transformnames = {};
bodies = {};
for i = 1:count
  if any(strcmpi(tnames{i}, pmcnames))
    transformnames{end+1} = tnames{i};
    % there shall be exactly one match (node and block names are unique),
    % so find shall return a scalar
    bodies{end+1} = allpmcs{strcmpi(tnames{i}, pmcnames)};
  end
end

if ~isempty(transformnames)
  
  count = length(transformnames);
  yoffset = 100;
  xoffset = 95;
  newFields = [];
  for i = 1:count
    newFields = [newFields transformnames{i} '.rotation#' transformnames{i} '.translation#'];
  end
  newFields = newFields(1:end-1);  % strip trailing hash
  physmodFields=newFields;
  numPhysmodPorts=length(strfind(newFields, '#'))+1;
  numPorts=numPhysmodPorts;
  
  % Create a Visualization subsystem with a unique name that contains the
  % VRML file that it is pointing to.
  [~, vrmlname] = fileparts(vrmlfile);
  vss_name=['VR Scene:' vrmlname];
  subsys = [physmod '/' vss_name];
  load_system('simulink');
  vss=add_block(['simulink/Ports &' char(10) 'Subsystems/Subsystem'], subsys, ...
    'MakeNameUnique', 'on', 'Position', [20 150 100 200], 'Tag', 'vrphysmod_vss');
  subsys=[get(vss, 'Path') '/' get(vss, 'Name')];
  % delete default ports
  Simulink.SubSystem.deleteContents(subsys);
  
  allExistingFields=[];
  allExistingSrcblks=[];
  blkConnSink=[]; % Holds handles of additional source blocks that feed into the VR Sink
  vrsinkPortNum=[]; % Holds the corresponding VR Sink input port numbers that blkConnSink connect to
  otherConnections=0; % Number of additional blocks that need to be linked to the VR Sink as a part of consolidation
  
  % nonUniqueSourceFields holds the fields that are members of
  % physModFields but either have a non-unique source OR have an existing
  % source block that is different from a regular PhysMod connection. In
  % either case we do not want VRBUILDPMCONN to connect anything to this
  % field. nonUniqueSourceFields is passed as an argument for VRBUILDPMCONN
  nonUniqueSourceFields=[];

  % Get all the fields and the corresponding source blocks into the arrays:
  % allExistingFields and allExistingSrcblks
  for iSink = 1:length(vrmlfile_sinks)% Loop not entered when length is 0

    tempField = cell2mat(get_param(vrmlfile_sinks(iSink), 'fieldswritten'));
    % strip fields from any trailing format information (that is subject 
    % to changes) and arrange fields into cell array of strings
    % Example:
    % from string 'u-joint_pin2-1.rotation.4.1.double'
    % select the substring 'u-joint_pin2-1.rotation'
    tempField = regexp(['#' tempField], '#([^\.]+\.[^\.#]+)', 'match');
    sinkPorts = cell2mat(get_param(vrmlfile_sinks(iSink), 'PortConnectivity'));
    tempSrcblk = [];
    tempSrcblkStr = [];
    for iField = 1:length(tempField)
      if(sinkPorts(iField).SrcBlock>0 && ~isempty(strfind(tempSrcblkStr, [ ' ' mat2str(sinkPorts(iField).SrcBlock) ' '])))
        error('VR:invalidmodelstructure', 'For the VR Sink block "%s", more than one ports have the same source block. Make sure no two ports of the Sink have the same source block', [get_param(cell2mat(vrmlfile_sinks(iSink)), 'Parent') '/' get_param(cell2mat(vrmlfile_sinks(iSink)), 'Name')]);
      else
        tempSrcblk =[ tempSrcblk sinkPorts(iField).SrcBlock];
      end
      tempSrcblkStr = [tempSrcblkStr ' ' mat2str(sinkPorts(iField).SrcBlock)];
    end
    allExistingFields = horzcat(allExistingFields, tempField);
    allExistingSrcblks = [allExistingSrcblks tempSrcblk];
    ph = get_param(cell2mat(vrmlfile_sinks(iSink)), 'PortHandles');
    line_handles = get(ph.Inport, 'Line');
    for i = 1:length(line_handles)
      if(line_handles{i} > 0)
        delete(line_handles{i});
      end
    end
  end
  
  repeatInstanceDone = [];
  
  for ic = 1:length(allExistingFields) % Loop not entered when length is 0

    eachField = strrep(allExistingFields{ic}, '#', ''); 
    
    if(~isempty(strfind(repeatInstanceDone, eachField)))
      %To avoid redundant runs of the same field after it is processed
      continue
    end
    
    repeatInstances = strfind(cell2mat(allExistingFields), eachField);
    repeatInstanceDone = [repeatInstanceDone eachField];
    
    % In the following section of the code we check to see if there
    % are any non-Unique source blocks driving the same port on two
    % different instances of the VR Sink block. For example if the
    % same robot arm is being driven by SimMechanics body block in
    % one instance of the VR Sink block and a Sine wave block in
    % another. If non-Unique sources are found, we warn the user
    % and leave the field unconnected. If the source driving a VR
    % Sink port is unique then we do one of the following:
    
    % 1. If the unique source is a From block with the Goto tag
    % matching the Sink port we delete it as we are going to create
    % it anew in the Consolidated Sink subsystem.
    % Note that if this unique From block has signal originating in
    % SimMechanics body block we create the From block in
    % VRBUILDPMCONN. From blocks with signal originating in a
    % user-created block get created before the call to
    % VRBUILDPMCONN and the line connection to the VR Sink block is
    % made after the call to VRBUILDPMCONN
    
    % 2. If NOT we create a Goto-From pair to get the signal into
    % the new VR Sink block
    
    if(isempty(strfind(newFields, eachField)))
      % Update the list of newFields that need to be enabled on
      % the consolidated Sink
      newFields = [newFields '#' eachField];
      numPorts = numPorts + 1;
    end
    
    uniqueSource = 1;
    % Create a Goto tag string that is representative of the VR
    % Sink port name. This string will be used to identify sources
    % that are From blocks and have this unique tag. 
    
    % The '_vrphysmod' suffix added to distinguish connections made by vrphysmod.
    % Replace '-' with a double '_', a dot with a single '_'.
    vrgototag = [strrep(strrep(eachField, '-', '__'), '.', '_') '_vrphysmod'];
    PhysmodFound = 0;
    connBlocks = [];
 
    % For each Field of allExistingFields find all the connected
    % blocks and store them in connBlocks
    
    % convert cell array back to char, add trailing #
    allExistingFieldsChar = [cell2mat(allExistingFields) '#'];
    for i = 1:length(repeatInstances) % Do not consider any open ports of the sinks for uniqueness testing
      if(allExistingSrcblks(length(strfind(allExistingFieldsChar(1:repeatInstances(i)), '#')))>0)
        connBlocks = [connBlocks allExistingSrcblks(length(strfind(allExistingFieldsChar(1:repeatInstances(i)), '#')))];
      end
    end
    
    if(~isempty(connBlocks))
      for iConnBlock = 1:length(connBlocks)
        % Within this FOR loop we check the uniqueness of all
        % the connBlocks that are driving a particular VR Sink
        % port in different Sink instances
        correspondingSrcblk = connBlocks(iConnBlock);
        blocktype = get_param(correspondingSrcblk, 'BlockType');
        
        if(iConnBlock == 1)
          firstblock = correspondingSrcblk;
        end
        
        if(strcmp(blocktype, get_param(firstblock, 'BlockType')))
          if(strcmp(blocktype, 'From'))
            if(~strcmp(get_param(correspondingSrcblk, 'GotoTag'), get_param(firstblock, 'GotoTag')))
              warning('VR:physmodmodelstructure', 'From blocks with different Goto tags driving port: %s found: \n ''%s'' \n ''%s'' ', ...
                eachField, ...
                [get(firstblock, 'Path') '/' get(firstblock, 'Name')], ...
                [get(correspondingSrcblk, 'Path') '/' get(correspondingSrcblk, 'Name')]);
              uniqueSource = 0;
              if(isempty(strfind(nonUniqueSourceFields, eachField)))
                nonUniqueSourceFields = [nonUniqueSourceFields eachField]; %#ok<*AGROW>
              end
              continue
            elseif(strcmp(get_param(correspondingSrcblk, 'GotoTag'), vrgototag) && ~isempty(strfind(physmodFields, eachField)))
              PhysmodFound = 1;
            end
            
          elseif(strcmp(blocktype, 'SubSystem') && strcmp(get_param(correspondingSrcblk, 'MaskType'), 'Rotation Matrix to VRML Rotation'))
            ports=get_param(correspondingSrcblk, 'PortConnectivity');
            if(~strcmp(get_param(ports(1).SrcBlock, 'BlockType'), 'From'))
              warning('VR:physmodmodelstructure', 'Multiple sources driving port: %s found: \n ''%s'' \n ''%s'' ', ...
                eachField, ...
                [get(firstblock, 'Path') '/' get(firstblock, 'Name')], ...
                [get(correspondingSrcblk, 'Path') '/' get(correspondingSrcblk, 'Name')]);
              uniqueSource=0;
              if(isempty(strfind(nonUniqueSourceFields, eachField)))
                nonUniqueSourceFields=[nonUniqueSourceFields eachField];
              end
              continue
            else
              firstblockports=get_param(firstblock, 'PortConnectivity');
              if(~strcmp(get_param(ports(1).SrcBlock, 'GotoTag'), get_param(firstblockports(1).SrcBlock, 'GotoTag')))
                warning('VR:physmodmodelstructure', 'From blocks with different Goto tags driving Rotation Matrix for port: %s found: \n ''%s'' \n ''%s'' ', ...
                  eachField, ...
                  [get(firstblockports(1).SrcBlock, 'Path') '/' get(firstblockports(1).SrcBlock, 'Name')], ...
                  [get(ports(1).SrcBlock, 'Path') '/' get(ports(1).SrcBlock, 'Name')]);
                uniqueSource=0;
                if(isempty(strfind(nonUniqueSourceFields, eachField)))
                  nonUniqueSourceFields=[nonUniqueSourceFields eachField];
                end
                continue
              elseif(strcmp(get_param(ports(1).SrcBlock, 'GotoTag'), vrgototag) && ~isempty(strfind(physmodFields, eachField)))
                PhysmodFound=1;
              end
            end
            
          elseif(correspondingSrcblk~=firstblock)
            warning('VR:physmodmodelstructure', 'Multiple sources driving port: %s found: \n ''%s'' \n ''%s'' ', ...
              eachField, ...
              [get(firstblock, 'Path') '/' get(firstblock, 'Name')], ...
              [get(correspondingSrcblk, 'Path') '/' get(correspondingSrcblk, 'Name')]);
            uniqueSource=0;
            if(isempty(strfind(nonUniqueSourceFields, eachField)))
              nonUniqueSourceFields=[nonUniqueSourceFields eachField];
            end
            continue
          end
          
        else
          warning('VR:physmodmodelstructure', 'Multiple sources driving port: %s found: \n ''%s'' \n ''%s'' ', ...
            eachField, ...
            [get(firstblock, 'Path') '/' get(firstblock, 'Name')], ...
            [get(correspondingSrcblk, 'Path') '/' get(correspondingSrcblk, 'Name')]);
          uniqueSource=0;
          if(isempty(strfind(nonUniqueSourceFields, eachField)))
            nonUniqueSourceFields=[nonUniqueSourceFields eachField];
          end
          continue
        end        
      end
      
      if(uniqueSource)
        % The source block is unique
        
        if(~PhysmodFound)
          % The source block is neither a PhysMod From nor
          % 'PhysMod From-->Rotation Matrix block' combination
          
          % We use addGotoFromPair to check for a
          % non-PhysMod, user-created source. We set this to
          % 0 whenever we determine the source can clash with
          % a PhysMod source or an otherwise bad source for
          % which we not create the From/Goto pair
          addGotoFromPair=1;
          uniqueGotoExists=0;
          allGotos_eachField=find_system(bdroot(subsys), 'LookUnderMasks', 'all', ...
            'BlockType', 'Goto', 'GotoTag', vrgototag);
   
          if(~isempty(allGotos_eachField))
            if(~isempty(strfind(physmodFields, eachField)))
              % There is a unique non-PhysMod source driving a
              % PhysMod field. Throw a warning and add the field to
              % nonUniqueSourceFields to make sure we
              % leave the corresponding port on the VR
              % Sink unconnected in VRBUILDPMCONN
              warning('VR:physmodmodelstructure', 'Cannot connect "%s" to the field "%s"...A PhysMod Goto block with the tag:"%s" found.', ...
                [get_param(correspondingSrcblk, 'Parent') '/' get_param(correspondingSrcblk, 'Name')], ...
                [eachField ' in ' subsys '/VR Sink' ], vrgototag);
              addGotoFromPair=0;
              nonUniqueSourceFields=[nonUniqueSourceFields eachField];
              
            elseif(length(allGotos_eachField)>1)
              % More than one Goto block with the unique
              % vrgototag exist in the model. Throw a
              % warning. Since this is a non-PhysMod
              % field {thanks to
              % if(~isempty(strfind(physmodFields, eachFie
              % ld)))}  we need not update
              % nonUniqueSourceFields.
              listGotos=[];
              % Find the multiple Goto blocks and store
              % them in listGotos to use in the warning
              % message
              for i=1:length(allGotos_eachField)
                gotopathname=[get_param(cell2mat(allGotos_eachField(i)), 'Parent') '/' get_param(cell2mat(allGotos_eachField(i)), 'Name')];
                listGotos=strvcat(listGotos, gotopathname);  %#ok<VCAT>
              end
              warning('VR:physmodmodelstructure', 'Multiple Goto blocks with the same tag "%s" found:%s', vrgototag, listGotos');
              addGotoFromPair=0;

            else
              % We found a unique Goto block with
              % vrgototag. Therefore we can always create
              % a From block driving the VR Sink port in
              % the new Visualization subsystem.
              % Therefore we can delete the source blocks
              % (stored in connBlocks) for all the
              % existing instances of the VR Sink blocks
              % that we are consolidating
              uniqueGotoExists=1;
              for iconn=1:length(connBlocks)
                delete_block(connBlocks(iconn));
              end
            end
            
          elseif(strcmp(blocktype, 'From'))
            % There exists no Goto block with vrgototag but
            % the source block driving the VR Sink port is
            % a From block. This is yet another case where
            % we throw a warning and update
            % nonUniqueSourceFields to leave the port open.
            warning('VR:physmodmodelstructure', 'From block "%s" does not have a Goto', ...
              [get_param(correspondingSrcblk, 'Parent') '/' get_param(correspondingSrcblk, 'Name')]);
            addGotoFromPair=0;
            nonUniqueSourceFields=[nonUniqueSourceFields eachField];
          end
          
          if(addGotoFromPair)
            % First add the From block in the new
            % Visualization subsystem. We update
            % otherConnections and vrSinkPortNum and use
            % them later to connect the From blocks to the
            % VR Sink block after the call to
            % VRBUILDPMCONN
            otherConnections=otherConnections+1;
            correspondingPort=length(strfind(newFields(1:strfind(newFields, eachField)), '#'))+1;
            vrsinkPortNum(otherConnections)=correspondingPort;
            k=correspondingPort;
            position=[xoffset+150 yoffset+25*(k-1)+5 xoffset+150+100 yoffset+25*(k-1)+25];
            blkConnSink(otherConnections)=add_block(['simulink/Signal' char(10) 'Routing/From'], ...
              [subsys '/From'], 'MakeNameUnique', 'on', ...
              'ShowName', 'off', 'GotoTag', vrgototag, ...
              'position', position);
            
            if(~uniqueGotoExists)
              % If there isn't a unique corresponding Goto,
              % then create it in the Subsystem where the
              % unique, non-PhysMod source was found. Also
              % connect the source to the Goto block
              open_system(get_param(correspondingSrcblk, 'Parent'));
              sourceSS=get(correspondingSrcblk, 'Path');
              SrcblkPosition=get_param(correspondingSrcblk, 'Position');
              gotoPosition=[SrcblkPosition(3)+20 SrcblkPosition(2) SrcblkPosition(3)+100 SrcblkPosition(4)];
              gotoBlock = add_block(['simulink/Signal' char(10) 'Routing/Goto'], ...
                [sourceSS '/Goto'], 'MakeNameUnique', 'on', ...
                'ShowName', 'off', 'GotoTag', vrgototag, ...
                'TagVisibility', 'global', 'Position', gotoPosition);
              add_line(sourceSS, [get_param(correspondingSrcblk, 'Name') '/1'], [get_param(gotoBlock, 'Name') '/1']);
            end
          end
          
        else
          % If the source is a PhysMod From or From->VRML
          % Rotation block we delete it, as we are going to
          % create them again in VRBUILDPMCONN
          if(strcmp(blocktype, 'From'))
            for iconn=1:length(connBlocks)
              delete_block(connBlocks(iconn));
            end
          else
            for iconn=1:length(connBlocks)
              ph=get_param(connBlocks(iconn), 'PortHandles');
              ports=get_param(connBlocks(iconn), 'PortConnectivity');
              lh=get(ph.Inport, 'Line');
              delete(lh);
              delete_block(ports(1).SrcBlock);
              delete_block(connBlocks(iconn));
            end
          end
        end
      end
    end
  end
  
  % create VR Sink block and set its properties
  load_system('vrlib');
  add_block('vrlib/VR Sink', [subsys '/VR Sink'], 'position', ...
    [xoffset+360 yoffset xoffset+360+120 yoffset+25*numPorts], ...
    'WorldFileName', vrmlfile, 'Tag', 'vrphysmod_vss');
  set_param([subsys '/VR Sink'], 'fieldswritten', newFields);
  set_param([subsys '/VR Sink'], 'SampleTime', '-1'); % This makes VR Sink inherit sample time from the model
  set_param([subsys '/VR Sink'], 'AutoView', 'on');
  
  % Switch off the SimMechanics visualization in the
  % model configuration parameters. Models created by mech_import shall
  % have all these properties defined. Commenting turning off the
  % Environment block since it only controls whether or not the
  % machine associated with the particular Env block will appear in the
  % SimMechanics Visualization or not and we are indeed turning the
  % SimMechanics Visualization off in the configuration parameters
  
  % set_param([physmod '/Machine' char(10) 'Environment'], 'VisualizeMachine', 'off');
  set_param(bdroot(physmod), 'VisOnUpdateDiagram', 'off');
  set_param(bdroot(physmod), 'VisDuringSimulation', 'off');
  
  % Remove old lines and blocks from SimMechanics models if they exist
  delete_line(find_system(physmod, 'LookUnderMasks', 'all', 'FindAll', 'on', 'type', 'line', 'Tag', 'vrphysmod'));
  delete_block(find_system(physmod, 'LookUnderMasks', 'all', 'type', 'block', 'Tag', 'vrphysmod'));
  
  % Build the SimMechanics model blocks and connections.
  % For each body in the model:
  % - add a coordinate system with center(0, 0, 0) and unity orientation
  %   after checking that there is none already available on the block
  % - add body sensor block
  % - measure body position and rotation w.r.t new coordinate system
  %   using body sensor block
  % - feed position and rotation signals to the virtual scene
  vrbuildpmconn(count, transformnames, bodies, subsys, xoffset, yoffset, nonUniqueSourceFields);
  
  % Connect additional From blocks created to route user-created sources
  % to the corresponding VR Sink ports
  if otherConnections > 0
    for i = 1:otherConnections
      add_line(subsys, [get_param(blkConnSink(i), 'Name') '/1'], ...
        ['VR Sink/' num2str(vrsinkPortNum(i))]);
    end
  end
  
  % Delete old Visualization subsystems if empty
  for iSink = 1:length(vrmlfile_sinks)% Loop not entered when length is 0
    iSinkSS = get_param(cell2mat(vrmlfile_sinks(iSink)), 'Parent');
    delete_block(cell2mat(vrmlfile_sinks(iSink)));
    if (length(find_system(iSinkSS, 'type', 'block')) < 2)
      delete_block(iSinkSS);
    end
  end
  
  % issue a "SolidWorks" warning about possible mismatch of VRML nodes and
  % PM bodies when duplicities found in DEF node names stripped from -n suffix
  % do this only if 'solidworks' hint found in the input VRML file
  if ~isempty(strfind(hints, 'solidworks'))
    
    % strip any '-n' suffix from tnames{}
    % or transformnames? - weaker condition depending on matches with PM model..
    strippednames = regexprep(tnames, '-\d+$', '');
    
    % unique names contain less elements than all names => duplicities exist
    if length(unique(strippednames)) < length(strippednames)
      warning('VR:duplicitiesinvrnames', [ ...
        'VRML node names that differ only in numbered suffixes have been found in the model.' ...
        '\nIt is possible that there is a mismatch in associations between VRML nodes and their physical modeling bodies. ' ...
        '\nPlease make sure that DEF names of nodes in the VRML file are identical to their corresponding body names in the Simulink model.' ...
        '\nFor further information see the help text.' ...
        ]);
    end
    
  end
  
  % cleanup
  close_system('vrlib')
  close_system('simulink')
  open_system([subsys '/VR Sink']);
  % let the 'Visualization' subsystem open
  % close_system(subsys);
  
else
  
  warning('VR:nomatchvrpm', 'No match found between VRML file Transforms and Mechanical System bodies!');
  
end

end
