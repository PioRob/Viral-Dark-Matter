classdef ReporterQueue < handle
% ReporterQueue manages a queue of variable reporters. It has methods
% for initiating a queue, appending reporters to the queue, and 
% sequentially executing the reporters. A reporter queue makes it possible
% to linearize reporting of hierarchical objects, such as 
% cell arrays and MCOS objects. In particular, this can be done by
% initializing the queue with a hierarchical object reporter that 
% generates and appends to the queue reporters for each of the objects 
% embedded in the variable owned by the object. Running the queue 
% executes the toplevel reporter which adds reporters to the queue that
% themselves may add reporters to the queue. The queue runs until it is
% exhausted or reaches an optional reporter limit.
%
% ReporterQueue is a singleton class. Use the static method
% rptgen.cmpn.VariableReporters.ReporterQueue.getTheQueue to get the
% queue object.
  
% Copyright 2010 The MathWorks, Inc.

  properties
    
    % The main report destined to receive the variable reports 
    % generated by this queue.
    uddReport
        
    % The reporter queue
    FIFO = {}
    
    % Counts the number of reporters added to the queue. This value
    % is used to create a unique id for each reporter.
    ReportCount = 1;
    
  end
 
  methods
    
    function add(moQueue, moReporter)
    % add(moQueue, moReporter) adds moReporter to the end
    % of moQueue.
      moQueue.FIFO{end+1} = moReporter;
      moReporter.registerLink();
    end
    
    function moReporter = pop(moQueue)
    % moReporter = pop(moQueue) pops a reporter off the front of the
    % queue.
      moReporter = [];
      if ~isempty(moQueue.FIFO)
        moReporter = moQueue.FIFO{1};
        moQueue.FIFO(1) = [];
      end
    end
    
    function clear(moQueue)
    % clear(moQueue) empties the queue of any reporters left from a
    % previous run.
      moQueue.FIFO = {};
    end
    
    function init(moQueue, moOpts, uddReport, varName, varValue)
    % init(moQueue, moOpts, uddReport, varName, varValue) clears
    % the queue, creates a reporter for varName/Value, and adds it to
    % the queue.
      import rptgen.cmpn.VariableReporters.*;
      moQueue.clear();
      ReportLinkResolver.getTheResolver().clear();
      moQueue.uddReport = uddReport;
      moReporter = ReporterFactory.makeReporter(moOpts, uddReport, ...
        varName, varValue);
      moQueue.add(moReporter);
    end
    
    function joVarReport = run(moQueue)
    % joVarReport = run(moQueue) executes the reporters in the queue
    % until there are no more reporters or it reaches the limit 
    % specified by the associated dialog's object limit option.
      joVarReport = moQueue.uddReport.createDocumentFragment();
      moReporter = moQueue.pop();
      i = 1;
      while ~isempty(moReporter) && i < moReporter.moOpts.ObjectLimit
        joQueuedReport = moReporter.report();
        if ~isempty(joQueuedReport)
          joVarReport.appendChild(joQueuedReport);
        end
        moReporter = moQueue.pop();
        i = i+1;
      end
    end
    
    function id = getReporterId(moQueue)
      id = moQueue.ReportCount;
      moQueue.ReportCount = moQueue.ReportCount + 1;
    end
    
  end % of dynamic methods
  
  methods (Static)
    
    function moQueue = getTheQueue()
    % moQueue = getTheQueue() gets the reporter queue.
      import rptgen.cmpn.VariableReporters.*;
      
      persistent moTheQueue
      
      if isempty(moTheQueue)
        moTheQueue = ReporterQueue;      
      end
      
      moQueue = moTheQueue;
      
    end
    
  end
  
end

