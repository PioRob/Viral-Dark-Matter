function [errorCode, message] = mbuild_helper(varargin)
%MBUILD_HELPER is a helper function that contains the code that MBUILD.M
%   (an autogenerated file) executes.  It sets up the inputs to call mex.pl
%   (on PC) and mex (on Unix).
%
%   For information on how to use MBUILD see MBUILD help by typing "help
%   mbuild" or "mbuild -h".

% $Revision: 1.1.6.12 $  $Date $
% Copyright 1984-2007 The MathWorks, Inc.

% Use try... catch... since the subfunctions can throw an error message
% If they do, then set the error code to 1 and the message is set to the
% appropriate message as reported by the sub-function.

errMsg     = '';

try
    if isunix
        if (nargin > 0)
            args = sprintf(' "%s"', varargin{:});
        else
            args = '';
        end
        
        if (strncmpi(computer,'MACI',4))
            %
            % Insure correct value of MACI64 environment variable is set.
            %
            prevValue = getenv('MACI64');
            if (isempty(prevValue))
                if (strcmpi(computer,'MACI'))
                    setenv('MACI64','0')
                else
                    setenv('MACI64','1')
                end
            end
        end 
        mexname = get_mex_opts(varargin{:});
        errCode = unix([matlabroot '/bin/mbuild' args]);        
        if (strncmpi(computer,'MACI',4))
            if (isempty(prevValue))
                setenv('MACI64');
            end
        end
        
    elseif ispc
        % Cache off potentially harmful input arguments so that we can clear
        % them.
        vars = cacheOffEnvironmentVariables;
        clearEnvironmentVariables;
        mexname = get_mex_opts(varargin{:});
        matlab_bin_location=[matlabroot '\bin'];

        % Loop over all the arguments. Put extra quotes around any that
        % contain spaces.

        for i=1:numel((varargin))
            if (find(varargin{i} == ' '))
                varargin{i} = [ '"' varargin{i} '"' ];
            end
        end

        cmdargs = ['-called_from_matlab' sprintf(' %s', varargin{:})];
        quote_str = '"';
        cmdtool = [quote_str matlabroot '\sys\perl\win32\bin\perl.exe' quote_str ' ' ...
            quote_str matlab_bin_location '\mex.pl' quote_str ' -mb'];
        [cmd, rspfile] = make_rsp_file(cmdtool, cmdargs);        
        errCode  = compilerDos([ cmd ' -' computer('arch') ]);        

        restoreEnvironmentVariables(vars);
        delete(rspfile);
    end
catch ex
    errMsg = ex.message;
    errCode = 1;
end

if (nargout > 0)
    if( nargout == 2)
        message = errMsg;
    end
    errorCode = errCode;
elseif (errCode ~= 0)
    msg = sprintf('%s\n%s\n','Unable to complete successfully.',errMsg);
    id  = 'MATLABCompiler:MBUILD:genericFailure';
    error(id, '%s', msg);
end


%%%%%%%%%%%%%%%%%%%%
%%% SUBFUNCTIONS %%%
%%%%%%%%%%%%%%%%%%%%

% Used to save off the environment variables that could cause problems
% for perl.
function result = cacheOffEnvironmentVariables
variables = {'PERLLIB', 'PERL5LIB', 'PERL5OPT', 'PERL5SHELL'};
for i = 1:length(variables)
    result.(variables{i}) = getenv(variables{i});
end

% Restores the environment variables I clear in the main mex function.
function restoreEnvironmentVariables(cache)
names = fieldnames(cache);
for i = 1:length(names)
    setenv(names{i}, cache.(names{i}));
end

% Clears out a set of environment variables that could cause errors in
% perl.
function clearEnvironmentVariables
variables = {'PERLLIB', 'PERL5LIB', 'PERL5OPT', 'PERL5SHELL'};
for i = 1:length(variables)
    setenv(variables{i});
end

function result = read_response_file(filename)
%
% Read a response file (a filename that starts with '@')
% and return a cell of strings, one per entry in the response file.
% Use Perl to ensure processing of arguments is the same as mex.bat
%

result = {};

cmd = ['"' matlabroot '\sys\perl\win32\bin\perl" -e "' ...
    'require ''' matlabroot '\\sys\\perl\\win32\\lib\\shellwords.pl'';' ...
    'open(FILE, ''' filename ''') || die ''Could not open ' filename ''';' ...
    'while (<FILE>) {$line .= $_;} ' ...
    '$line =~ s/\\/\\\\/g;' ...
    '@ARGS = &shellwords($line); ' ...
    '$\" = \"\n\";' ...
    'print \"@ARGS\";'];

[s, r] = compilerDos(cmd);

if s == 0
    cr = sprintf('\n');
    while ~isempty(r)
        [result{end+1}, r] = strtok(r, cr);
    end
else
    error('MATLABCompiler:MBUILD:responseFileError',...
        'Error reading response file %s',filename);
end


function [mexname, setup] = get_mex_opts(varargin)
%
% GET_MEX_OPTS gets the options from the command line.
%
% name:
% It gets the name of the destination MEX-file.  This has two
% purposes:
%   1) All platforms need to clear the MEX-file from memory before
%      attempting the build, to avoid problems rebuilding shared
%      libraries that the OS considers "in use".
%   2) Windows MATLAB deletes the MEX-file before the build occurs.
%      It then checks to see whether the MEX-file was created so as
%      to establish error status.
%   This function returns the minimum necessary information.  Further
%   processing is done on the MEX-file name by clear_mex_file to
%   successfully clear it.
%
% setup:
% It also returns whether or not '-setup' was passed.
%

mexname = '';
outdir = '';
setup = 0;

% First, check for and expand response files into varargin.
v = {};
for count=1:nargin
    arg = varargin{count};
    if( ~ischar(arg) || isempty(arg) )
        errorStruct.identifier = 'MATLABCompiler:MEX:invalidArgument';
        errorStruct.message = 'All arguments must be non-empty strings.';
        rethrow(errorStruct);
    end
    if arg(1) == '@'
        new_args = read_response_file(arg(2:end));
        v(end+1:end+length(new_args)) = new_args;
    else
        v{end+1} = arg;
    end
end

varargin = v;

count = 1;
while (count <= nargin)
    arg = varargin{count};
    if isempty(mexname) && arg(1) ~= '-' && ~any(arg=='=') && any(arg=='.')
        %
        % Source file: MEX-file will be built in current directory
        % Only the first source file matters
        %
        mexname = arg;
        fileseps = find(mexname == filesep);
        if any(fileseps)
            mexname = mexname(fileseps(end)+1:end);
        end
        mexname = strtok(mexname, '.');
    elseif strcmp(arg, '-f')
        count = count + 1;
    elseif strcmp(arg, '-output')
        count = count + 1;
        if count > length(varargin)
            errorStruct.identifier = 'MATLABCompiler:MEX:OutputSwitchMisuse';
            errorStruct.message = 'The -output switch must be followed by a file name.';
            rethrow(errorStruct);
        end
        mexname = varargin{count};
    elseif strcmp(arg, '-outdir')
        count = count + 1;
        if count > length(varargin)
            errorStruct.identifier = 'MATLABCompiler:MEX:OutdirSwitchMisuse';
            errorStruct.message = 'The -outdir switch must be followed by a directory name.';
            rethrow(errorStruct);
        end
        outdir = varargin{count};
    elseif strcmp(arg, '-setup')
        setup = 1;
        break;
    end
    count = count + 1;
end

mexname = fullfile(outdir, mexname);

function [cmd, rspfile] = make_rsp_file(cmdtool, cmdargs)
rspfile = [tempname '.rsp'];
[Frsp, errmsg] = fopen(rspfile, 'wt');
if Frsp == -1
    errorStruct.identifier = 'MATLABCompiler:MEX:RspFilePermissionOpen';
    errorStruct.message = sprintf('Cannot open file "%s" for writing: %s.', rspfile, errmsg);
    rethrow(errorStruct);
end
try
    count = fprintf(Frsp, '%s', cmdargs);
    if count < length(cmdargs)
        errmsg = ferror(Frsp);
        errorStruct.identifier = 'MATLABCompiler:MEX:RspFilePermissionWrite';
        errorStruct.message = sprintf('Cannot write to file "%s": %s.', rspfile, errmsg);
        rethrow(errorStruct);

    end
    fclose(Frsp);
catch ex
    fclose(Frsp);
    delete(rspfile);
    rethrow(ex);
end

cmd = [cmdtool ' @"' rspfile '"'];

%We may need to know if the desktop is open
function out = desktopOpen
try
    myDesktop = com.mathworks.ide.desktop.MLDesktop.getMLDesktop;
    if ~isempty(myDesktop),
        out = 1;
    else
        out = 0;
    end
catch ex
    out = 0;
end
