function dlg = getDialogSchema(this, mode) %#ok<INUSD>
%GETDIALOGSCHEMA   Get the dialog information.

%   Author(s): J. Schickler
%   Copyright 2005-2010 The MathWorks, Inc.
%   $Revision: 1.1.6.12.2.1 $  $Date: 2010/06/24 19:43:29 $

% Get the help frame and put it at the top of the GUI.
helpframe = getHelpFrame(this);
helpframe.RowSpan = [1 1];
helpframe.ColSpan = [1 3];

main = getMainFrame(this);

if strcmpi(this.OperatingMode, 'simulink') && ~supportsSLFixedPoint(this)
    
    main.RowSpan = [3 3];
    main.ColSpan = [1 3];
    items = getBottomWidgets(this, 2, {helpframe, main});
else
    if isfdtbxdlg(this)
        fixpt = getFixedPointTab(this);
    end
    
    maintab.Items = {main};
    maintab.Name  = FilterDesignDialog.message('MainTabName');
    maintab.Tag   = 'MainTab';
    
    if strcmpi(this.OperatingMode, 'simulink')
        items = {maintab, fixpt};
    else
        codegen = getCodeGenTab(this);
        if isfdtbxdlg(this)
            items = {maintab, fixpt, codegen};
        else
            items = {maintab, codegen};
        end
    end
    
    tab.Type    = 'tab';
    tab.Tabs    = items;
    tab.RowSpan = [3 3];
    tab.ColSpan = [1 3];
    tab.Tag     = 'TabPanel';
    tab.ActiveTab = this.ActiveTab;
    tab.TabChangedCallback = 'FilterDesignDialog.TabChangedCallback';
    
    items = getBottomWidgets(this, 2, {helpframe, tab});
end

dlg.DialogTitle     = getDialogTitle(this);
dlg.DisplayIcon     = 'toolbox\shared\dastudio\resources\MatlabIcon.png';
dlg.Items           = items;
dlg.LayoutGrid      = [5 3];
dlg.RowStretch      = [0 0 0 0 3];
dlg.ColStretch      = [2 1 0];
dlg.PreApplyMethod  = 'preApply';
dlg.PostApplyMethod = 'postApply';
dlg.CloseMethod     = 'close';
dlg.HelpMethod      = 'eval';
dlg.HelpArgs        = {'doc(''filterbuilder'');'};

% -------------------------------------------------------------------------
function codegen = getCodeGenTab(this)

mcode_label.Type    = 'text';
mcode_label.Name    = FilterDesignDialog.message('McodePanelTxt');
mcode_label.RowSpan = [1 1];
mcode_label.ColSpan = [1 2];
mcode_label.WordWrap = true;

mcode.Type         = 'pushbutton';
mcode.Name         = FilterDesignDialog.message('McodePushbuttonTxt');
mcode.ObjectMethod = 'export';
mcode.Tag          = 'mcode';
mcode.MethodArgs   = {'%dialog', 'mcode', true, 'generating MATLAB code'};
mcode.ArgDataTypes = {'handle', 'string', 'bool', 'string'};
mcode.Source       = this;
mcode.ToolTip      = 'Write an  MATLAB file  version of the filter generated by the dialog.';
mcode.Enabled      = this.Enabled;
mcode.RowSpan      = [2 2];
mcode.ColSpan      = [2 2];

mcodepanel.Name       = FilterDesignDialog.message('McodePanelName');
mcodepanel.Type       = 'group';
mcodepanel.Items      = {mcode_label, mcode};
mcodepanel.RowSpan    = [2 2];
mcodepanel.ColSpan    = [1 1];
mcodepanel.ColStretch = [1 0];
mcodepanel.LayoutGrid = [1 2];

items = {mcodepanel};

if isfdhdlcinstalled
    
    hdl_label.Type    = 'text';
    hdl_label.Name    = FilterDesignDialog.message('HDLPanelTxt');
    hdl_label.RowSpan = [1 1];
    hdl_label.ColSpan = [1 2];
    hdl_label.WordWrap = true;
    
    hdl.Type         = 'pushbutton';
    hdl.Name         = FilterDesignDialog.message('HDLPushbuttonTxt');
    hdl.ObjectMethod = 'export';
    hdl.Tag          = 'hdl';
    hdl.MethodArgs   = {'%dialog', 'hdl', true, 'generating HDL'};
    hdl.ArgDataTypes = {'handle', 'string', 'bool', 'string'};
    hdl.Source       = this;
    hdl.ToolTip      = 'Launch the HDL code generation dialog';
    hdl.Enabled      = this.Enabled;
    hdl.RowSpan      = [2 2];
    hdl.ColSpan      = [2 2];
    
    hdlpanel.Name       = FilterDesignDialog.message('HDLPanelName');
    hdlpanel.Type       = 'group';
    hdlpanel.Items      = {hdl_label, hdl};
    hdlpanel.RowSpan    = [1 1];
    hdlpanel.ColSpan    = [1 1];
    hdlpanel.ColStretch = [1 0];
    hdlpanel.LayoutGrid = [1 2];
    items = {items{:}, hdlpanel}; %#ok<CCAT>
end

if issimulinkinstalled
    
    simulink_label.Type    = 'text';
    simulink_label.Name    = FilterDesignDialog.message('SimulinkPanelTxt');
    simulink_label.RowSpan = [1 1];
    simulink_label.ColSpan = [1 2];
    
    block.Type         = 'pushbutton';
    block.Name         = FilterDesignDialog.message('SimulinkPushbuttonTxt');
    block.ObjectMethod = 'export';
    block.Tag          = 'block';
    block.MethodArgs   = {'%dialog', 'block', true, 'generating a model'};
    block.ArgDataTypes = {'handle', 'string', 'bool', 'string'};
    block.Source       = this;
    block.ToolTip      = 'Launch the export to Simulink dialog';
    block.Enabled      = this.Enabled;
    block.RowSpan      = [2 2];
    block.ColSpan      = [2 2];
    
    simulinkpanel.Name       = FilterDesignDialog.message('SimulinkPanelName');
    simulinkpanel.Type       = 'group';
    simulinkpanel.Items      = {simulink_label, block};
    simulinkpanel.RowSpan    = [3 3];
    simulinkpanel.ColSpan    = [1 1];
    simulinkpanel.ColStretch = [1 0];
    simulinkpanel.LayoutGrid = [2 2];
    
    items = {items{:}, simulinkpanel}; %#ok<CCAT>
end

codegen.Name       = FilterDesignDialog.message('CodegenTabName');
codegen.Items      = items;
codegen.Tag        = 'CodeGenerationTab';
codegen.RowStretch = [0 0 0 1];
codegen.LayoutGrid = [4 1];

% -------------------------------------------------------------------------
function fixpt = getFixedPointTab(this)

h = get(this, 'FixedPoint');

items = {getDialogSchemaStruct(h)};

fixpt.Name  = FilterDesignDialog.message('DataTypeTabName');
fixpt.Items = items;
fixpt.Tag   = 'FixedPointTab';

% [EOF]
