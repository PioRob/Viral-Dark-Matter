function createTmpModelForParFor(obj)

%   Copyright 2009 The MathWorks, Inc.

    if obj.UseParComp         
        % A temporary model will be generated to simulated in parfor if
        % simulation is not for coverage                                        
        opts = sldvdefaultoptions;        
        msg = xlate(['In order to use Parallel computation a temporary model ' ...
                'must be generated by copying model ''%s''. Unable to create a copy model. ', ...                           
                'Disabling the use of Parallel computation.']);       

        FilePathBlockReplacementModel = '$ModelName$_sldvrun_parfor';
        MakeOutputFilesUnique = get(opts,'MakeOutputFilesUnique');

        if strcmp(obj.UtilityName,'sldvruntest')
            dialogTitle = 'Simulink Design Verifier';
        else
            dialogTitle = 'Simulink Verification and Validation';
        end
        
        fullPath = Sldv.utils.settingsFilename(...
            FilePathBlockReplacementModel,...
            MakeOutputFilesUnique,...
            '.mdl', obj.OrigModelH, false, true, opts, dialogTitle);

        if isempty(fullPath)
            obj.UseParComp = false;
            msgId = 'UnabletoUseParFor';                                                   
            obj.handleMsg('warning', msgId, msg, obj.Model);  
            return;
        end

        [~, copymodel] = fileparts(fullPath); 
        copymodel  = sldvshareprivate('cmd_check_for_open_models', copymodel, MakeOutputFilesUnique, false);
        if isempty(copymodel)
            obj.UseParComp = false;
            msgId = 'UnabletoUseParFor2';                                                   
            obj.handleMsg('warning', msgId, msg, obj.Model);  
            return;
        end

        copymodelFullPath = fullPath;

        currentloc = get_param(obj.OrigModelH,'location');                                    
        originalmdlfileName = get_param(obj.OrigModelH,'filename'); 
        copyfile(originalmdlfileName,copymodelFullPath);

        status = fileattrib(copymodelFullPath,'+w');        
        if ~status
            obj.UseParComp = false;
            msgId = 'UnabletoUseParFor3';                                                   
            obj.handleMsg('warning', msgId, msg, obj.Model);  
            return;
        end

        try
            load_system(copymodelFullPath);
        catch Mex
            msg = xlate([msg ' %s']);
            obj.UseParComp = false;
            msgId = 'UnabletoUseParFor4';                                                   
            obj.handleMsg('warning', msgId, msg, obj.Model, Mex.message);  
            return;
        end

        obj.ModelH = get_param(copymodel,'Handle'); 
        obj.Model = get_param(copymodel,'Name'); 

        set_param(obj.ModelH, 'location', [currentloc(1),(currentloc(2)+currentloc(4))/2,...
            currentloc(3),currentloc(4)+(currentloc(4)-currentloc(2))/2]);               
    end
end

% LocalWords:  Unableto
