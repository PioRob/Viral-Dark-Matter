function Out = set(nlobj, varargin)
%SET  Set properties of nonlinearity estimator objects.
%
%   SET(NL, 'PropertyName', VALUE) sets the property 'PropertyName'
%   of the nonlinearity estimator NL to the value VALUE. An equivalent syntax
%   is
%      NL.PropertyName = VALUE
%
%   SET(NL, 'Property1', Value1, 'Property2', Value2,...) sets multiple
%   property values with a single statement.
%
%   SET(NL, 'Property') displays legitimate values for the specified
%   property.
%
%   SET(NL) displays all properties of NL and their admissible values.
%
%   If NL is an array of nonlinearity estimator objects, properties must
%   be set for individual objects with the dot syntax, like
%   NL(2).PropertyName=VALUE.
%   SET(NL, 'Property') and SET(NL) are allowed if NL contains objects of
%   the same class.

% Copyright 2005-2008 The MathWorks, Inc.
% $Revision: 1.1.8.6 $ $Date: 2008/10/31 06:14:39 $

% Author(s): Qinghua Zhang

% Check input arguments.
ni = nargin;
no = nargout;

if ~isa(nlobj, 'idnlfun')
    % Call built-in SET. Handles calls like set(gcf,'user',idnlfun).
    builtin('set', nlobj, varargin{:});
    return;
elseif (no && (ni > 2))
    ctrlMsgUtils.error('Ident:general:setOutputArg','idnlfun/set','idnlfun/set')
end

% Handle the case of object array
numobj = numel(nlobj);
if numobj>1
    allowedMOcase = false;
    if ni<3
        objclasses = cell(numobj,1);
        for ko=1:numobj
            objclasses{ko} = class(nlobj.ObjVector{ko});
        end
        if isequal(objclasses{:})
            allowedMOcase = true;
        end
    end
    
    if allowedMOcase
        if no==0
            if ni==1
                disp(sprintf('%dx1 array of objects with the property or properties:', numobj))
            else
                disp(sprintf('For each entry of the %dx1 array of objects:', numobj))
            end
        end
        nlobj = nlobj.ObjVector{1};
    else
        ctrlMsgUtils.error('Ident:idnlmodel:setObjArray')
    end
end

% Get public properties and their assignable values.
[AllProps, AsgnValues] = pnames(nlobj);

% Treat the case of UNITGAIN
if isempty(AllProps)
    if ~no
        fprintf('The %s object has no property.\n', upper(class(nlobj)));
    end
end

% Perform assignment.
if (ni == 1)
    % SET(nlobj) or S = SET(nlobj).
    if no
        Out = cell2struct(AsgnValues(:), AllProps(:), 1);
    else
        disp(idpvformat(AllProps, AsgnValues));
    end
elseif (ni == 2)
    % SET(nlobj, 'Property') or STR = SET(nlobj, 'Property').
    % Return admissible property value(s).
    try
        [Property, imatch] = nlpnmatchd(varargin{1}, AllProps, 18);
        if no
            Out = AsgnValues{imatch};
        else
            disp(AsgnValues{imatch});
        end
    catch E
        throw(E)
    end
else
    % SET(nlobj, 'Prop1', Value1, ...).
    sysname = inputname(1);
    if isempty(sysname)
        ctrlMsgUtils.error('Ident:general:setFirstInput','idnlfun/set')
    elseif (rem(ni-1, 2) ~= 0)
        ctrlMsgUtils.error('Ident:general:CompletePropertyValuePairs',upper(class(nlobj)),'idnlfun/set')
    end
    
    % Get read-only properties.
    ReadonlyProps = pnames(nlobj, 'readonly');
    
    % Match specified property names against list of public properties.
    % Include all properties to appropriately detect multiple matches.
    try
        for i = 1:2:ni-1
            varargin{i} = nlpnmatchd(varargin{i}, AllProps, 18);
            % Note: if the i:th property name does not uniquely match an item
            % of AllProps, the error generated by nlpnmatchd is caught here.
            
            % Check if varargin{i} is settable.
            if ismember(varargin{i}, ReadonlyProps)
                ctrlMsgUtils.error('Ident:general:readOnlyProp',varargin{i},upper(class(nlobj)))
            end
            
            nlobj.(varargin{i}) = varargin{i+1};
        end
    catch E
        throw(E)
    end
    
    % Assign nlobj in caller's workspace.
    assignin('caller', sysname, nlobj);
end

% FILE END